
STM32F405R_Inverter_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003080  08003080  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000003c  080030c4  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080030c4  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b466  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002278  00000000  00000000  0002b4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020d93  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000abae  00000000  00000000  0004ec33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c498f  00000000  00000000  000597e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011e170  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000630  00000000  00000000  0011e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a8c  00000000  00000000  0011e7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003050 	.word	0x08003050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08003050 	.word	0x08003050

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <GAS_Can_rxSetting>:
/*-------------------------Function Prototypes--------------------------------*/
static void GAS_Can_rxSetting(void);


/*----------------------Function Implementations------------------------------*/
static void GAS_Can_rxSetting(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef sFilterConfig;
	uint16_t StdId = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	85fb      	strh	r3, [r7, #46]	; 0x2e

	sFilterConfig.FilterActivation = ENABLE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = GAS_CAN_SFBK;
 80004ce:	230e      	movs	r3, #14
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28

	InverterControl_msg_rx_1.can = &hcan1;
 80004d2:	4b17      	ldr	r3, [pc, #92]	; (8000530 <GAS_Can_rxSetting+0x70>)
 80004d4:	4a17      	ldr	r2, [pc, #92]	; (8000534 <GAS_Can_rxSetting+0x74>)
 80004d6:	601a      	str	r2, [r3, #0]
	InverterControl_msg_rx_1.fifoAssignment = CAN_RX_FIFO0;
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <GAS_Can_rxSetting+0x70>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterFIFOAssignment = InverterControl_msg_rx_1.fifoAssignment;
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <GAS_Can_rxSetting+0x70>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	617b      	str	r3, [r7, #20]

	StdId = InverterControl_msg_rx_1.StdId;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <GAS_Can_rxSetting+0x70>)
 80004e6:	899b      	ldrh	r3, [r3, #12]
 80004e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004ee:	2301      	movs	r3, #1
 80004f0:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = StdId<<5;		//FMI: 0
 80004f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80004f8:	015b      	lsls	r3, r3, #5
 80004fa:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]

	InverterControl_msg_rx_1.fim = 0;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <GAS_Can_rxSetting+0x70>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]

	if (HAL_CAN_ConfigFilter(InverterControl_msg_rx_1.can, &sFilterConfig) != HAL_OK)
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <GAS_Can_rxSetting+0x70>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1d3a      	adds	r2, r7, #4
 8000514:	4611      	mov	r1, r2
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fbf0 	bl	8001cfc <HAL_CAN_ConfigFilter>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <GAS_Can_rxSetting+0x66>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000522:	f000 ff85 	bl	8001430 <Error_Handler>
	}
}
 8000526:	bf00      	nop
 8000528:	3730      	adds	r7, #48	; 0x30
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000
 8000534:	20000180 	.word	0x20000180

08000538 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	GAS_Can_rxSetting();
 800053c:	f7ff ffc0 	bl	80004c0 <GAS_Can_rxSetting>

	HAL_CAN_Start(&hcan1);
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <GAS_Can_init+0x24>)
 8000542:	f001 fcbb 	bl	8001ebc <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000546:	2102      	movs	r1, #2
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <GAS_Can_init+0x24>)
 800054a:	f001 fe35 	bl	80021b8 <HAL_CAN_ActivateNotification>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <GAS_Can_init+0x20>
	{
	  Error_Handler();
 8000554:	f000 ff6c 	bl	8001430 <Error_Handler>
//	Error_Handler();
//
//
//	}

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000180 	.word	0x20000180

08000560 <GAS_Scheduler_init>:
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_SYSTICK_Callback(void);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
//	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }

	InverterControl_init();
 8000564:	f000 f87a 	bl	800065c <InverterControl_init>
//********ADC initialization********=

//********CAN initialization********
	GAS_Can_init();
 8000568:	f7ff ffe6 	bl	8000538 <GAS_Can_init>

//********PWM initialization********

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <HAL_SYSTICK_Callback>:
	InverterControl_Run_service();
}

//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
void HAL_SYSTICK_Callback(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <HAL_SYSTICK_Callback+0x7c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <HAL_SYSTICK_Callback+0x7c>)
 800057c:	6013      	str	r3, [r2, #0]

	gTask.flag_1ms=True;
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <HAL_SYSTICK_Callback+0x80>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]

	if(gTimerCnt % 10 == 0)
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <HAL_SYSTICK_Callback+0x7c>)
 8000586:	6819      	ldr	r1, [r3, #0]
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_SYSTICK_Callback+0x84>)
 800058a:	fb83 2301 	smull	r2, r3, r3, r1
 800058e:	109a      	asrs	r2, r3, #2
 8000590:	17cb      	asrs	r3, r1, #31
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	4613      	mov	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	1aca      	subs	r2, r1, r3
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d102      	bne.n	80005a8 <HAL_SYSTICK_Callback+0x38>
	{
		gTask.flag_10ms=True;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_SYSTICK_Callback+0x80>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	705a      	strb	r2, [r3, #1]
	}

	if(gTimerCnt % 100 == 0)
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <HAL_SYSTICK_Callback+0x7c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_SYSTICK_Callback+0x88>)
 80005ae:	fb83 1302 	smull	r1, r3, r3, r2
 80005b2:	1159      	asrs	r1, r3, #5
 80005b4:	17d3      	asrs	r3, r2, #31
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	2164      	movs	r1, #100	; 0x64
 80005ba:	fb01 f303 	mul.w	r3, r1, r3
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <HAL_SYSTICK_Callback+0x5a>
	{
		gTask.flag_100ms=True;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_SYSTICK_Callback+0x80>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	709a      	strb	r2, [r3, #2]
	}

	if(gTimerCnt == 1000)
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_SYSTICK_Callback+0x7c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d2:	d105      	bne.n	80005e0 <HAL_SYSTICK_Callback+0x70>
	{
		gTask.flag_1000ms=True;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_SYSTICK_Callback+0x80>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	70da      	strb	r2, [r3, #3]
		gTimerCnt = 0;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <HAL_SYSTICK_Callback+0x7c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	}
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000064 	.word	0x20000064
 80005f0:	2000005c 	.word	0x2000005c
 80005f4:	66666667 	.word	0x66666667
 80005f8:	51eb851f 	.word	0x51eb851f

080005fc <GAS_Scheduler>:

void GAS_Scheduler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	if(gTask.flag_1ms == True)
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <GAS_Scheduler+0x5c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b01      	cmp	r3, #1
 8000608:	d105      	bne.n	8000616 <GAS_Scheduler+0x1a>
	{
		gTask.flag_1ms = False;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <GAS_Scheduler+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	InverterControl_Run_1ms();
 8000610:	f000 fb2e 	bl	8000c70 <InverterControl_Run_1ms>
}
 8000614:	bf00      	nop
		GAS_Scheduler_taskCounter_1ms();
	}

	if(gTask.flag_10ms == True)
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <GAS_Scheduler+0x5c>)
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b01      	cmp	r3, #1
 800061e:	d103      	bne.n	8000628 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <GAS_Scheduler+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	705a      	strb	r2, [r3, #1]
}
 8000626:	bf00      	nop
		GAS_Scheduler_taskCounter_10ms();
	}

	if(gTask.flag_100ms == True)
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <GAS_Scheduler+0x5c>)
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d103      	bne.n	800063a <GAS_Scheduler+0x3e>
	{
		gTask.flag_100ms = False;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <GAS_Scheduler+0x5c>)
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]
}
 8000638:	bf00      	nop
		GAS_Scheduler_taskCounter_100ms();
	}

	if(gTask.flag_1000ms == True)
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <GAS_Scheduler+0x5c>)
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b01      	cmp	r3, #1
 8000642:	d103      	bne.n	800064c <GAS_Scheduler+0x50>
	{
		gTask.flag_1000ms = False;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <GAS_Scheduler+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	70da      	strb	r2, [r3, #3]
}
 800064a:	bf00      	nop
	InverterControl_Run_service();
 800064c:	f000 f898 	bl	8000780 <InverterControl_Run_service>
}
 8000650:	bf00      	nop
	GAS_Scheduler_taskBackground();

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000005c 	.word	0x2000005c

0800065c <InverterControl_init>:


/***Public Function Implementations*******************************************/

void InverterControl_init(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	InverterControl.Inv1.be1.GPIOx = 	INVCON_INV1_BE1_GPIOX;
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <InverterControl_init+0x114>)
 8000662:	4a44      	ldr	r2, [pc, #272]	; (8000774 <InverterControl_init+0x118>)
 8000664:	601a      	str	r2, [r3, #0]
	InverterControl.Inv1.be1.GPIO_Pin = INVCON_INV1_BE1_GPIOP;
 8000666:	4b42      	ldr	r3, [pc, #264]	; (8000770 <InverterControl_init+0x114>)
 8000668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800066c:	809a      	strh	r2, [r3, #4]
	InverterControl.Inv1.be1.control =	InverterControl_io_none;
 800066e:	4b40      	ldr	r3, [pc, #256]	; (8000770 <InverterControl_init+0x114>)
 8000670:	2200      	movs	r2, #0
 8000672:	719a      	strb	r2, [r3, #6]
	InverterControl.Inv1.be2.GPIOx = 	INVCON_INV1_BE2_GPIOX;
 8000674:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <InverterControl_init+0x114>)
 8000676:	4a3f      	ldr	r2, [pc, #252]	; (8000774 <InverterControl_init+0x118>)
 8000678:	609a      	str	r2, [r3, #8]
	InverterControl.Inv1.be2.GPIO_Pin = INVCON_INV1_BE2_GPIOP;
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <InverterControl_init+0x114>)
 800067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000680:	819a      	strh	r2, [r3, #12]
	InverterControl.Inv1.be2.control = 	InverterControl_io_none;
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <InverterControl_init+0x114>)
 8000684:	2200      	movs	r2, #0
 8000686:	739a      	strb	r2, [r3, #14]
	InverterControl.Inv1.ba3.GPIOx = 	INVCON_INV1_BA3_GPIOX;
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <InverterControl_init+0x114>)
 800068a:	4a3b      	ldr	r2, [pc, #236]	; (8000778 <InverterControl_init+0x11c>)
 800068c:	611a      	str	r2, [r3, #16]
	InverterControl.Inv1.ba3.GPIO_Pin = INVCON_INV1_BA3_GPIOP;
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <InverterControl_init+0x114>)
 8000690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000694:	829a      	strh	r2, [r3, #20]
	InverterControl.Inv1.ba3.control =	InverterControl_io_none;
 8000696:	4b36      	ldr	r3, [pc, #216]	; (8000770 <InverterControl_init+0x114>)
 8000698:	2200      	movs	r2, #0
 800069a:	759a      	strb	r2, [r3, #22]

	InverterControl.Inv2.be1.GPIOx = 	INVCON_INV2_BE1_GPIOX;
 800069c:	4b34      	ldr	r3, [pc, #208]	; (8000770 <InverterControl_init+0x114>)
 800069e:	4a36      	ldr	r2, [pc, #216]	; (8000778 <InverterControl_init+0x11c>)
 80006a0:	619a      	str	r2, [r3, #24]
	InverterControl.Inv2.be1.GPIO_Pin = INVCON_INV2_BE1_GPIOP;
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <InverterControl_init+0x114>)
 80006a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a8:	839a      	strh	r2, [r3, #28]
	InverterControl.Inv2.be1.control =	InverterControl_io_none;
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <InverterControl_init+0x114>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	779a      	strb	r2, [r3, #30]
	InverterControl.Inv2.be2.GPIOx = 	INVCON_INV2_BE2_GPIOX;
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <InverterControl_init+0x114>)
 80006b2:	4a31      	ldr	r2, [pc, #196]	; (8000778 <InverterControl_init+0x11c>)
 80006b4:	621a      	str	r2, [r3, #32]
	InverterControl.Inv2.be2.GPIO_Pin = INVCON_INV2_BE2_GPIOP;
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <InverterControl_init+0x114>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	849a      	strh	r2, [r3, #36]	; 0x24
	InverterControl.Inv2.be2.control = 	InverterControl_io_none;
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <InverterControl_init+0x114>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	InverterControl.Inv2.ba3.GPIOx = 	INVCON_INV2_BA3_GPIOX;
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <InverterControl_init+0x114>)
 80006c8:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <InverterControl_init+0x11c>)
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
	InverterControl.Inv2.ba3.GPIO_Pin = INVCON_INV2_BA3_GPIOP;
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <InverterControl_init+0x114>)
 80006ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	InverterControl.Inv2.ba3.control =	InverterControl_io_none;
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <InverterControl_init+0x114>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	InverterControl.Inv3.be1.GPIOx = 	INVCON_INV3_BE1_GPIOX;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <InverterControl_init+0x114>)
 80006de:	4a25      	ldr	r2, [pc, #148]	; (8000774 <InverterControl_init+0x118>)
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
	InverterControl.Inv3.be1.GPIO_Pin = INVCON_INV3_BE1_GPIOP;
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <InverterControl_init+0x114>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	869a      	strh	r2, [r3, #52]	; 0x34
	InverterControl.Inv3.be1.control =	InverterControl_io_none;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <InverterControl_init+0x114>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	InverterControl.Inv3.be2.GPIOx = 	INVCON_INV3_BE2_GPIOX;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <InverterControl_init+0x114>)
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <InverterControl_init+0x118>)
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38
	InverterControl.Inv3.be2.GPIO_Pin = INVCON_INV3_BE2_GPIOP;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <InverterControl_init+0x114>)
 80006fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fe:	879a      	strh	r2, [r3, #60]	; 0x3c
	InverterControl.Inv3.be2.control = 	InverterControl_io_none;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <InverterControl_init+0x114>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	InverterControl.Inv3.ba3.GPIOx = 	INVCON_INV3_BA3_GPIOX;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <InverterControl_init+0x114>)
 800070a:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <InverterControl_init+0x118>)
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
	InverterControl.Inv3.ba3.GPIO_Pin = INVCON_INV3_BA3_GPIOP;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <InverterControl_init+0x114>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	InverterControl.Inv3.ba3.control =	InverterControl_io_none;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <InverterControl_init+0x114>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	InverterControl.Inv4.be1.GPIOx = 	INVCON_INV4_BE1_GPIOX;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <InverterControl_init+0x114>)
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <InverterControl_init+0x118>)
 8000722:	649a      	str	r2, [r3, #72]	; 0x48
	InverterControl.Inv4.be1.GPIO_Pin = INVCON_INV4_BE1_GPIOP;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <InverterControl_init+0x114>)
 8000726:	2240      	movs	r2, #64	; 0x40
 8000728:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	InverterControl.Inv4.be1.control =	InverterControl_io_none;
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <InverterControl_init+0x114>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	InverterControl.Inv4.be2.GPIOx = 	INVCON_INV4_BE2_GPIOX;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <InverterControl_init+0x114>)
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <InverterControl_init+0x120>)
 8000738:	651a      	str	r2, [r3, #80]	; 0x50
	InverterControl.Inv4.be2.GPIO_Pin = INVCON_INV4_BE2_GPIOP;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <InverterControl_init+0x114>)
 800073c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000740:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	InverterControl.Inv4.be2.control = 	InverterControl_io_none;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <InverterControl_init+0x114>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	InverterControl.Inv4.ba3.GPIOx = 	INVCON_INV4_BA3_GPIOX;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <InverterControl_init+0x114>)
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <InverterControl_init+0x120>)
 8000750:	659a      	str	r2, [r3, #88]	; 0x58
	InverterControl.Inv4.ba3.GPIO_Pin = INVCON_INV4_BA3_GPIOP;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <InverterControl_init+0x114>)
 8000754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	InverterControl.Inv4.ba3.control =	InverterControl_io_none;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <InverterControl_init+0x114>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000068 	.word	0x20000068
 8000774:	40020800 	.word	0x40020800
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400

08000780 <InverterControl_Run_service>:

void InverterControl_Run_service(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b098      	sub	sp, #96	; 0x60
 8000784:	af00      	add	r7, sp, #0
 8000786:	4b7e      	ldr	r3, [pc, #504]	; (8000980 <InverterControl_Run_service+0x200>)
 8000788:	617b      	str	r3, [r7, #20]

/***Private Inline Function Implementations***********************************/

static inline __attribute__((always_inline)) void InverterControl_Update_io(InverterControl_Inverter_t* inv)
{
	if(inv->be1.control == InverterControl_io_reset)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	799b      	ldrb	r3, [r3, #6]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d11a      	bne.n	80007c8 <InverterControl_Run_service+0x48>
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	613b      	str	r3, [r7, #16]
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
}

static inline __attribute__((always_inline)) void InverterControl_Off_be1(InverterControl_Inverter_t* inv)
{
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	889b      	ldrh	r3, [r3, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	4619      	mov	r1, r3
 80007a2:	f001 ffcf 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	889b      	ldrh	r3, [r3, #4]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4610      	mov	r0, r2
 80007b2:	f001 ffaf 	bl	8002714 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf14      	ite	ne
 80007bc:	2301      	movne	r3, #1
 80007be:	2300      	moveq	r3, #0
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	71da      	strb	r2, [r3, #7]
}
 80007c6:	e01e      	b.n	8000806 <InverterControl_Run_service+0x86>
	else if(inv->be1.control == InverterControl_io_set)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	799b      	ldrb	r3, [r3, #6]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d11a      	bne.n	8000806 <InverterControl_Run_service+0x86>
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	889b      	ldrh	r3, [r3, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	f001 ffb0 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4610      	mov	r0, r2
 80007f0:	f001 ff90 	bl	8002714 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	71da      	strb	r2, [r3, #7]
}
 8000804:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2200      	movs	r2, #0
 800080a:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	7b9b      	ldrb	r3, [r3, #14]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d11a      	bne.n	800084a <InverterControl_Run_service+0xca>
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	60bb      	str	r3, [r7, #8]
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
}

static inline __attribute__((always_inline)) void InverterControl_Off_be2(InverterControl_Inverter_t* inv)
{
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	6898      	ldr	r0, [r3, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	899b      	ldrh	r3, [r3, #12]
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	f001 ff8e 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	4619      	mov	r1, r3
 8000832:	4610      	mov	r0, r2
 8000834:	f001 ff6e 	bl	8002714 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf14      	ite	ne
 800083e:	2301      	movne	r3, #1
 8000840:	2300      	moveq	r3, #0
 8000842:	b2da      	uxtb	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	73da      	strb	r2, [r3, #15]
}
 8000848:	e01e      	b.n	8000888 <InverterControl_Run_service+0x108>
	else if(inv->be2.control == InverterControl_io_set)
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	7b9b      	ldrb	r3, [r3, #14]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d11a      	bne.n	8000888 <InverterControl_Run_service+0x108>
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6898      	ldr	r0, [r3, #8]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	899b      	ldrh	r3, [r3, #12]
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	f001 ff6f 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	4619      	mov	r1, r3
 8000870:	4610      	mov	r0, r2
 8000872:	f001 ff4f 	bl	8002714 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	bf14      	ite	ne
 800087c:	2301      	movne	r3, #1
 800087e:	2300      	moveq	r3, #0
 8000880:	b2da      	uxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	73da      	strb	r2, [r3, #15]
}
 8000886:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	2200      	movs	r2, #0
 800088c:	739a      	strb	r2, [r3, #14]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	603b      	str	r3, [r7, #0]

static inline __attribute__((always_inline)) bool InverterControl_Read_ba3(InverterControl_Inverter_t* inv)
{
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	691a      	ldr	r2, [r3, #16]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	8a9b      	ldrh	r3, [r3, #20]
 800089a:	4619      	mov	r1, r3
 800089c:	4610      	mov	r0, r2
 800089e:	f001 ff39 	bl	8002714 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	2200      	movs	r2, #0
 80008b6:	759a      	strb	r2, [r3, #22]
}
 80008b8:	bf00      	nop
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <InverterControl_Run_service+0x204>)
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(inv->be1.control == InverterControl_io_reset)
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	799b      	ldrb	r3, [r3, #6]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11a      	bne.n	80008fc <InverterControl_Run_service+0x17c>
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f001 ff35 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e0:	889b      	ldrh	r3, [r3, #4]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f001 ff15 	bl	8002714 <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf14      	ite	ne
 80008f0:	2301      	movne	r3, #1
 80008f2:	2300      	moveq	r3, #0
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	71da      	strb	r2, [r3, #7]
}
 80008fa:	e01e      	b.n	800093a <InverterControl_Run_service+0x1ba>
	else if(inv->be1.control == InverterControl_io_set)
 80008fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fe:	799b      	ldrb	r3, [r3, #6]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d11a      	bne.n	800093a <InverterControl_Run_service+0x1ba>
 8000904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	889b      	ldrh	r3, [r3, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	4619      	mov	r1, r3
 8000914:	f001 ff16 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	889b      	ldrh	r3, [r3, #4]
 8000920:	4619      	mov	r1, r3
 8000922:	4610      	mov	r0, r2
 8000924:	f001 fef6 	bl	8002714 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2da      	uxtb	r2, r3
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	71da      	strb	r2, [r3, #7]
}
 8000938:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 800093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093c:	2200      	movs	r2, #0
 800093e:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	7b9b      	ldrb	r3, [r3, #14]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d11f      	bne.n	8000988 <InverterControl_Run_service+0x208>
 8000948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	6898      	ldr	r0, [r3, #8]
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	899b      	ldrh	r3, [r3, #12]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f001 fef4 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	899b      	ldrh	r3, [r3, #12]
 8000964:	4619      	mov	r1, r3
 8000966:	4610      	mov	r0, r2
 8000968:	f001 fed4 	bl	8002714 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf14      	ite	ne
 8000972:	2301      	movne	r3, #1
 8000974:	2300      	moveq	r3, #0
 8000976:	b2da      	uxtb	r2, r3
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	73da      	strb	r2, [r3, #15]
}
 800097c:	e023      	b.n	80009c6 <InverterControl_Run_service+0x246>
 800097e:	bf00      	nop
 8000980:	20000068 	.word	0x20000068
 8000984:	20000080 	.word	0x20000080
	else if(inv->be2.control == InverterControl_io_set)
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	7b9b      	ldrb	r3, [r3, #14]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d11a      	bne.n	80009c6 <InverterControl_Run_service+0x246>
 8000990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000992:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	6898      	ldr	r0, [r3, #8]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	899b      	ldrh	r3, [r3, #12]
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	f001 fed0 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	899b      	ldrh	r3, [r3, #12]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4610      	mov	r0, r2
 80009b0:	f001 feb0 	bl	8002714 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	73da      	strb	r2, [r3, #15]
}
 80009c4:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 80009c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c8:	2200      	movs	r2, #0
 80009ca:	739a      	strb	r2, [r3, #14]
 80009cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ce:	61bb      	str	r3, [r7, #24]
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	8a9b      	ldrh	r3, [r3, #20]
 80009d8:	4619      	mov	r1, r3
 80009da:	4610      	mov	r0, r2
 80009dc:	f001 fe9a 	bl	8002714 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	2200      	movs	r2, #0
 80009f4:	759a      	strb	r2, [r3, #22]
}
 80009f6:	bf00      	nop
 80009f8:	4b9b      	ldr	r3, [pc, #620]	; (8000c68 <InverterControl_Run_service+0x4e8>)
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
	if(inv->be1.control == InverterControl_io_reset)
 80009fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009fe:	799b      	ldrb	r3, [r3, #6]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d11a      	bne.n	8000a3a <InverterControl_Run_service+0x2ba>
 8000a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 8000a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f001 fe96 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a1e:	889b      	ldrh	r3, [r3, #4]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4610      	mov	r0, r2
 8000a24:	f001 fe76 	bl	8002714 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a36:	71da      	strb	r2, [r3, #7]
}
 8000a38:	e01e      	b.n	8000a78 <InverterControl_Run_service+0x2f8>
	else if(inv->be1.control == InverterControl_io_set)
 8000a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3c:	799b      	ldrb	r3, [r3, #6]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d11a      	bne.n	8000a78 <InverterControl_Run_service+0x2f8>
 8000a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a44:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 8000a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4619      	mov	r1, r3
 8000a52:	f001 fe77 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a5c:	889b      	ldrh	r3, [r3, #4]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f001 fe57 	bl	8002714 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a74:	71da      	strb	r2, [r3, #7]
}
 8000a76:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 8000a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a80:	7b9b      	ldrb	r3, [r3, #14]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d11a      	bne.n	8000abc <InverterControl_Run_service+0x33c>
 8000a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8c:	6898      	ldr	r0, [r3, #8]
 8000a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a90:	899b      	ldrh	r3, [r3, #12]
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	f001 fe55 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa0:	899b      	ldrh	r3, [r3, #12]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	f001 fe35 	bl	8002714 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf14      	ite	ne
 8000ab0:	2301      	movne	r3, #1
 8000ab2:	2300      	moveq	r3, #0
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab8:	73da      	strb	r2, [r3, #15]
}
 8000aba:	e01e      	b.n	8000afa <InverterControl_Run_service+0x37a>
	else if(inv->be2.control == InverterControl_io_set)
 8000abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000abe:	7b9b      	ldrb	r3, [r3, #14]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d11a      	bne.n	8000afa <InverterControl_Run_service+0x37a>
 8000ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 8000ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aca:	6898      	ldr	r0, [r3, #8]
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	899b      	ldrh	r3, [r3, #12]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f001 fe36 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ade:	899b      	ldrh	r3, [r3, #12]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f001 fe16 	bl	8002714 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af6:	73da      	strb	r2, [r3, #15]
}
 8000af8:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 8000afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000afc:	2200      	movs	r2, #0
 8000afe:	739a      	strb	r2, [r3, #14]
 8000b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 8000b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b06:	691a      	ldr	r2, [r3, #16]
 8000b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0a:	8a9b      	ldrh	r3, [r3, #20]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4610      	mov	r0, r2
 8000b10:	f001 fe00 	bl	8002714 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf14      	ite	ne
 8000b1a:	2301      	movne	r3, #1
 8000b1c:	2300      	moveq	r3, #0
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b22:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 8000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b26:	2200      	movs	r2, #0
 8000b28:	759a      	strb	r2, [r3, #22]
}
 8000b2a:	bf00      	nop
 8000b2c:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <InverterControl_Run_service+0x4ec>)
 8000b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(inv->be1.control == InverterControl_io_reset)
 8000b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b32:	799b      	ldrb	r3, [r3, #6]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d11a      	bne.n	8000b6e <InverterControl_Run_service+0x3ee>
 8000b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b3a:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 8000b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b42:	889b      	ldrh	r3, [r3, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	f001 fdfc 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4610      	mov	r0, r2
 8000b58:	f001 fddc 	bl	8002714 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b6a:	71da      	strb	r2, [r3, #7]
}
 8000b6c:	e01e      	b.n	8000bac <InverterControl_Run_service+0x42c>
	else if(inv->be1.control == InverterControl_io_set)
 8000b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b70:	799b      	ldrb	r3, [r3, #6]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d11a      	bne.n	8000bac <InverterControl_Run_service+0x42c>
 8000b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b78:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 8000b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b80:	889b      	ldrh	r3, [r3, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	4619      	mov	r1, r3
 8000b86:	f001 fddd 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b90:	889b      	ldrh	r3, [r3, #4]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f001 fdbd 	bl	8002714 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf14      	ite	ne
 8000ba0:	2301      	movne	r3, #1
 8000ba2:	2300      	moveq	r3, #0
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ba8:	71da      	strb	r2, [r3, #7]
}
 8000baa:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 8000bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bb4:	7b9b      	ldrb	r3, [r3, #14]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d11a      	bne.n	8000bf0 <InverterControl_Run_service+0x470>
 8000bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bbc:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bc0:	6898      	ldr	r0, [r3, #8]
 8000bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bc4:	899b      	ldrh	r3, [r3, #12]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f001 fdbb 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd4:	899b      	ldrh	r3, [r3, #12]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4610      	mov	r0, r2
 8000bda:	f001 fd9b 	bl	8002714 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf14      	ite	ne
 8000be4:	2301      	movne	r3, #1
 8000be6:	2300      	moveq	r3, #0
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bec:	73da      	strb	r2, [r3, #15]
}
 8000bee:	e01e      	b.n	8000c2e <InverterControl_Run_service+0x4ae>
	else if(inv->be2.control == InverterControl_io_set)
 8000bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bf2:	7b9b      	ldrb	r3, [r3, #14]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d11a      	bne.n	8000c2e <InverterControl_Run_service+0x4ae>
 8000bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 8000bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bfe:	6898      	ldr	r0, [r3, #8]
 8000c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c02:	899b      	ldrh	r3, [r3, #12]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	f001 fd9c 	bl	8002744 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c12:	899b      	ldrh	r3, [r3, #12]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4610      	mov	r0, r2
 8000c18:	f001 fd7c 	bl	8002714 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2a:	73da      	strb	r2, [r3, #15]
}
 8000c2c:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 8000c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c30:	2200      	movs	r2, #0
 8000c32:	739a      	strb	r2, [r3, #14]
 8000c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 8000c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c3e:	8a9b      	ldrh	r3, [r3, #20]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f001 fd66 	bl	8002714 <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c56:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 8000c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	759a      	strb	r2, [r3, #22]
}
 8000c5e:	bf00      	nop
}
 8000c60:	bf00      	nop
 8000c62:	3760      	adds	r7, #96	; 0x60
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000098 	.word	0x20000098
 8000c6c:	200000b0 	.word	0x200000b0

08000c70 <InverterControl_Run_1ms>:
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0)
 8000c76:	e02f      	b.n	8000cd8 <InverterControl_Run_1ms+0x68>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, rxDataBuf);
 8000c78:	463b      	mov	r3, r7
 8000c7a:	f107 0208 	add.w	r2, r7, #8
 8000c7e:	2100      	movs	r1, #0
 8000c80:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <InverterControl_Run_1ms+0x80>)
 8000c82:	f001 f95f 	bl	8001f44 <HAL_CAN_GetRxMessage>
		if(canRxHeader.FilterMatchIndex == InverterControl_msg_rx_1.fim)
 8000c86:	6a3a      	ldr	r2, [r7, #32]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <InverterControl_Run_1ms+0x84>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d123      	bne.n	8000cd8 <InverterControl_Run_1ms+0x68>
			uint8_t dlc = canRxHeader.DLC;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(dlc > 0)
 8000c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d01c      	beq.n	8000cd8 <InverterControl_Run_1ms+0x68>
				if(dlc > 8)
 8000c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d911      	bls.n	8000cca <InverterControl_Run_1ms+0x5a>
					dlc = 8;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(dlc--)
 8000cac:	e00d      	b.n	8000cca <InverterControl_Run_1ms+0x5a>
					InverterControl_msg_rx_1.msg.U[dlc] = rxDataBuf[dlc];
 8000cae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cba:	440a      	add	r2, r1
 8000cbc:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <InverterControl_Run_1ms+0x84>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				while(dlc--)
 8000cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1ea      	bne.n	8000cae <InverterControl_Run_1ms+0x3e>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <InverterControl_Run_1ms+0x80>)
 8000cdc:	f001 fa44 	bl	8002168 <HAL_CAN_GetRxFifoFillLevel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1c8      	bne.n	8000c78 <InverterControl_Run_1ms+0x8>
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000180 	.word	0x20000180
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <MX_ADC1_Init+0x9c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_ADC1_Init+0xa0>)
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d5a:	f000 fc71 	bl	8001640 <HAL_ADC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d64:	f000 fb64 	bl	8001430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d7a:	f000 fca5 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d84:	f000 fb54 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000110 	.word	0x20000110
 8000d94:	40012000 	.word	0x40012000
 8000d98:	0f000001 	.word	0x0f000001

08000d9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <MX_ADC2_Init+0x9c>)
 8000db2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_ADC2_Init+0xa0>)
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000dfe:	f000 fc1f 	bl	8001640 <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 fb12 	bl	8001430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC2_Init+0x98>)
 8000e1e:	f000 fc53 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000e28:	f000 fb02 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000c8 	.word	0x200000c8
 8000e38:	40012100 	.word	0x40012100
 8000e3c:	0f000001 	.word	0x0f000001

08000e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481c      	ldr	r0, [pc, #112]	; (8000f20 <HAL_ADC_MspInit+0xe0>)
 8000eae:	f001 fa95 	bl	80023dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000eb2:	e02c      	b.n	8000f0e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_ADC_MspInit+0xe4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d127      	bne.n	8000f0e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ef6:	23f0      	movs	r3, #240	; 0xf0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_ADC_MspInit+0xe0>)
 8000f0a:	f001 fa67 	bl	80023dc <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40012100 	.word	0x40012100

08000f28 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <MX_CAN1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_CAN1_Init+0x64>)
 8000f78:	f000 fdc4 	bl	8001b04 <HAL_CAN_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f82:	f000 fa55 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000180 	.word	0x20000180
 8000f90:	40006400 	.word	0x40006400

08000f94 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <MX_CAN2_Init+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fb6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_CAN2_Init+0x64>)
 8000fe4:	f000 fd8e 	bl	8001b04 <HAL_CAN_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000fee:	f000 fa1f 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000158 	.word	0x20000158
 8000ffc:	40006800 	.word	0x40006800

08001000 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a43      	ldr	r2, [pc, #268]	; (800112c <HAL_CAN_MspInit+0x12c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d136      	bne.n	8001090 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <HAL_CAN_MspInit+0x130>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a41      	ldr	r2, [pc, #260]	; (8001130 <HAL_CAN_MspInit+0x130>)
 800102a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_CAN_MspInit+0x130>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10d      	bne.n	8001050 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <HAL_CAN_MspInit+0x134>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <HAL_CAN_MspInit+0x134>)
 800103e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001042:	6413      	str	r3, [r2, #64]	; 0x40
 8001044:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_CAN_MspInit+0x134>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_CAN_MspInit+0x134>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <HAL_CAN_MspInit+0x134>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_CAN_MspInit+0x134>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800106c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800107e:	2309      	movs	r3, #9
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <HAL_CAN_MspInit+0x138>)
 800108a:	f001 f9a7 	bl	80023dc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800108e:	e048      	b.n	8001122 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_CAN_MspInit+0x13c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d143      	bne.n	8001122 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a24      	ldr	r2, [pc, #144]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_CAN_MspInit+0x130>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <HAL_CAN_MspInit+0x130>)
 80010be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_CAN_MspInit+0x130>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10d      	bne.n	80010e4 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_CAN_MspInit+0x134>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001100:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001112:	2309      	movs	r3, #9
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <HAL_CAN_MspInit+0x140>)
 800111e:	f001 f95d 	bl	80023dc <HAL_GPIO_Init>
}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40006400 	.word	0x40006400
 8001130:	20000058 	.word	0x20000058
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	40006800 	.word	0x40006800
 8001140:	40020400 	.word	0x40020400

08001144 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b6f      	ldr	r3, [pc, #444]	; (800131c <MX_GPIO_Init+0x1d8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a6e      	ldr	r2, [pc, #440]	; (800131c <MX_GPIO_Init+0x1d8>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b6c      	ldr	r3, [pc, #432]	; (800131c <MX_GPIO_Init+0x1d8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b68      	ldr	r3, [pc, #416]	; (800131c <MX_GPIO_Init+0x1d8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a67      	ldr	r2, [pc, #412]	; (800131c <MX_GPIO_Init+0x1d8>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b65      	ldr	r3, [pc, #404]	; (800131c <MX_GPIO_Init+0x1d8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b61      	ldr	r3, [pc, #388]	; (800131c <MX_GPIO_Init+0x1d8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a60      	ldr	r2, [pc, #384]	; (800131c <MX_GPIO_Init+0x1d8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a59      	ldr	r2, [pc, #356]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <MX_GPIO_Init+0x1d8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ec:	484c      	ldr	r0, [pc, #304]	; (8001320 <MX_GPIO_Init+0x1dc>)
 80011ee:	f001 faa9 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 6174 	mov.w	r1, #3904	; 0xf40
 80011f8:	484a      	ldr	r0, [pc, #296]	; (8001324 <MX_GPIO_Init+0x1e0>)
 80011fa:	f001 faa3 	bl	8002744 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001204:	4848      	ldr	r0, [pc, #288]	; (8001328 <MX_GPIO_Init+0x1e4>)
 8001206:	f001 fa9d 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC3 PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800120a:	f24f 0339 	movw	r3, #61497	; 0xf039
 800120e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4841      	ldr	r0, [pc, #260]	; (8001324 <MX_GPIO_Init+0x1e0>)
 8001220:	f001 f8dc 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001224:	2386      	movs	r3, #134	; 0x86
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	483b      	ldr	r0, [pc, #236]	; (8001324 <MX_GPIO_Init+0x1e0>)
 8001238:	f001 f8d0 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800123c:	2309      	movs	r3, #9
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4836      	ldr	r0, [pc, #216]	; (8001328 <MX_GPIO_Init+0x1e4>)
 8001250:	f001 f8c4 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001254:	f640 73f7 	movw	r3, #4087	; 0xff7
 8001258:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	482d      	ldr	r0, [pc, #180]	; (8001320 <MX_GPIO_Init+0x1dc>)
 800126a:	f001 f8b7 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800126e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4827      	ldr	r0, [pc, #156]	; (8001320 <MX_GPIO_Init+0x1dc>)
 8001284:	f001 f8aa 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	481f      	ldr	r0, [pc, #124]	; (8001320 <MX_GPIO_Init+0x1dc>)
 80012a2:	f001 f89b 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012a6:	f44f 6374 	mov.w	r3, #3904	; 0xf40
 80012aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <MX_GPIO_Init+0x1e0>)
 80012c0:	f001 f88c 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80012c4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <MX_GPIO_Init+0x1e4>)
 80012da:	f001 f87f 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_GPIO_Init+0x1e4>)
 80012f8:	f001 f870 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012fc:	2304      	movs	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001310:	f001 f864 	bl	80023dc <HAL_GPIO_Init>

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020c00 	.word	0x40020c00

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 f912 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f810 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f7ff ff02 	bl	8001144 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001340:	f7ff fcda 	bl	8000cf8 <MX_ADC1_Init>
  MX_CAN2_Init();
 8001344:	f7ff fe26 	bl	8000f94 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001348:	f7ff fdee 	bl	8000f28 <MX_CAN1_Init>
  MX_ADC2_Init();
 800134c:	f7ff fd26 	bl	8000d9c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001350:	f7ff f906 	bl	8000560 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_Scheduler();
 8001354:	f7ff f952 	bl	80005fc <GAS_Scheduler>
 8001358:	e7fc      	b.n	8001354 <main+0x24>
	...

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	; 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fe68 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <SystemClock_Config+0xcc>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <SystemClock_Config+0xcc>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <SystemClock_Config+0xcc>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <SystemClock_Config+0xd0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <SystemClock_Config+0xd0>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <SystemClock_Config+0xd0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013d0:	23a8      	movs	r3, #168	; 0xa8
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d8:	2307      	movs	r3, #7
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f9c9 	bl	8002778 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ec:	f000 f820 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2105      	movs	r1, #5
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fc2a 	bl	8002c68 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800141a:	f000 f809 	bl	8001430 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3750      	adds	r7, #80	; 0x50
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f892 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80014dc:	f000 ff77 	bl	80023ce <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001524:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd7 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f001 fd5f 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fef9 	bl	8001330 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800154c:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 8001550:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001554:	200001ac 	.word	0x200001ac

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_Init+0x40>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_Init+0x40>)
 8001572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x40>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 feef 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f808 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff ff54 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fef9 	bl	80023b6 <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 fecf 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000030 	.word	0x20000030
 80015f8:	20000038 	.word	0x20000038
 80015fc:	20000034 	.word	0x20000034

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000038 	.word	0x20000038
 8001624:	200001a8 	.word	0x200001a8

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200001a8 	.word	0x200001a8

08001640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e033      	b.n	80016be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fbee 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001686:	f023 0302 	bic.w	r3, r3, #2
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f93a 	bl	800190c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
 80016ae:	e001      	b.n	80016b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1c>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e105      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x228>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d925      	bls.n	8001740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68d9      	ldr	r1, [r3, #12]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	3b1e      	subs	r3, #30
 800170a:	2207      	movs	r2, #7
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43da      	mvns	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	400a      	ands	r2, r1
 8001718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	4603      	mov	r3, r0
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4403      	add	r3, r0
 8001732:	3b1e      	subs	r3, #30
 8001734:	409a      	lsls	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	e022      	b.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6919      	ldr	r1, [r3, #16]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	4603      	mov	r3, r0
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4403      	add	r3, r0
 800177c:	409a      	lsls	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b06      	cmp	r3, #6
 800178c:	d824      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b05      	subs	r3, #5
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b05      	subs	r3, #5
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e04c      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d824      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b23      	subs	r3, #35	; 0x23
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b23      	subs	r3, #35	; 0x23
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	e023      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b41      	subs	r3, #65	; 0x41
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b41      	subs	r3, #65	; 0x41
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_ADC_ConfigChannel+0x234>)
 8001874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d109      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d123      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x1e6>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d11b      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_ConfigChannel+0x23c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_ADC_ConfigChannel+0x240>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9a      	lsrs	r2, r3, #18
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40012300 	.word	0x40012300
 8001900:	40012000 	.word	0x40012000
 8001904:	20000030 	.word	0x20000030
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <ADC_Init+0x1f0>)
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <ADC_Init+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e00f      	b.n	8001a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0202 	bic.w	r2, r2, #2
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e1b      	ldrb	r3, [r3, #24]
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	035a      	lsls	r2, r3, #13
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e007      	b.n	8001a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	051a      	lsls	r2, r3, #20
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac2:	025a      	lsls	r2, r3, #9
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	029a      	lsls	r2, r3, #10
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40012300 	.word	0x40012300
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0ed      	b.n	8001cf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fa6c 	bl	8001000 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0202 	bic.w	r2, r2, #2
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b38:	f7ff fd76 	bl	8001628 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b3e:	e012      	b.n	8001b66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b40:	f7ff fd72 	bl	8001628 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d90b      	bls.n	8001b66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0c5      	b.n	8001cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e5      	bne.n	8001b40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b84:	f7ff fd50 	bl	8001628 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8a:	e012      	b.n	8001bb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b8c:	f7ff fd4c 	bl	8001628 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d90b      	bls.n	8001bb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2205      	movs	r2, #5
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e09f      	b.n	8001cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0e5      	beq.n	8001b8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7e1b      	ldrb	r3, [r3, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d108      	bne.n	8001bda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7e5b      	ldrb	r3, [r3, #25]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e007      	b.n	8001c14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7e9b      	ldrb	r3, [r3, #26]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d108      	bne.n	8001c2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e007      	b.n	8001c3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0220 	bic.w	r2, r2, #32
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7edb      	ldrb	r3, [r3, #27]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0210 	bic.w	r2, r2, #16
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e007      	b.n	8001c68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0210 	orr.w	r2, r2, #16
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7f1b      	ldrb	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0208 	orr.w	r2, r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e007      	b.n	8001c92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0208 	bic.w	r2, r2, #8
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7f5b      	ldrb	r3, [r3, #29]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d108      	bne.n	8001cac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0204 	orr.w	r2, r2, #4
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e007      	b.n	8001cbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d003      	beq.n	8001d22 <HAL_CAN_ConfigFilter+0x26>
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f040 80be 	bne.w	8001e9e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001d22:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001d24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	2201      	movs	r2, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d123      	bne.n	8001dcc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001da6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3248      	adds	r2, #72	; 0x48
 8001dac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc2:	6979      	ldr	r1, [r7, #20]
 8001dc4:	3348      	adds	r3, #72	; 0x48
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d122      	bne.n	8001e1a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001df4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3248      	adds	r2, #72	; 0x48
 8001dfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e10:	6979      	ldr	r1, [r7, #20]
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e34:	e007      	b.n	8001e46 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e60:	e007      	b.n	8001e72 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e90:	f023 0201 	bic.w	r2, r3, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e006      	b.n	8001eac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40006400 	.word	0x40006400

08001ebc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d12e      	bne.n	8001f2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7ff fb9e 	bl	8001628 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eee:	e012      	b.n	8001f16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef0:	f7ff fb9a 	bl	8001628 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b0a      	cmp	r3, #10
 8001efc:	d90b      	bls.n	8001f16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e012      	b.n	8001f3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e5      	bne.n	8001ef0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e006      	b.n	8001f3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
  }
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f58:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d003      	beq.n	8001f68 <HAL_CAN_GetRxMessage+0x24>
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	f040 80f3 	bne.w	800214e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d116      	bne.n	8001faa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0e7      	b.n	800215c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d107      	bne.n	8001faa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0d8      	b.n	800215c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	331b      	adds	r3, #27
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0204 	and.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	331b      	adds	r3, #27
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e00b      	b.n	8001ffa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	331b      	adds	r3, #27
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	331b      	adds	r3, #27
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0202 	and.w	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	331b      	adds	r3, #27
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	331b      	adds	r3, #27
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0a1a      	lsrs	r2, r3, #8
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0c1a      	lsrs	r2, r3, #16
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3302      	adds	r3, #2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e1a      	lsrs	r2, r3, #24
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	3303      	adds	r3, #3
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3304      	adds	r3, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0a1a      	lsrs	r2, r3, #8
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3305      	adds	r3, #5
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0c1a      	lsrs	r2, r3, #16
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3306      	adds	r3, #6
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e1a      	lsrs	r2, r3, #24
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3307      	adds	r3, #7
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0220 	orr.w	r2, r2, #32
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	e007      	b.n	800214a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0220 	orr.w	r2, r2, #32
 8002148:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e006      	b.n	800215c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d002      	beq.n	800218a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002184:	7afb      	ldrb	r3, [r7, #11]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d10f      	bne.n	80021aa <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e005      	b.n	80021aa <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d002      	beq.n	80021d6 <HAL_CAN_ActivateNotification+0x1e>
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d109      	bne.n	80021ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6959      	ldr	r1, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e006      	b.n	80021f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff47 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff5c 	bl	800224c <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffb0 	bl	8002324 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80023d2:	f7fe f8cd 	bl	8000570 <HAL_SYSTICK_Callback>
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e16b      	b.n	80026d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f8:	2201      	movs	r2, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	f040 815a 	bne.w	80026ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d005      	beq.n	800242e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	2b02      	cmp	r3, #2
 800242c:	d130      	bne.n	8002490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 0201 	and.w	r2, r3, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b03      	cmp	r3, #3
 800249a:	d017      	beq.n	80024cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d123      	bne.n	8002520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	08da      	lsrs	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3208      	adds	r2, #8
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0203 	and.w	r2, r3, #3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80b4 	beq.w	80026ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b60      	ldr	r3, [pc, #384]	; (80026e8 <HAL_GPIO_Init+0x30c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <HAL_GPIO_Init+0x30c>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_GPIO_Init+0x30c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257e:	4a5b      	ldr	r2, [pc, #364]	; (80026ec <HAL_GPIO_Init+0x310>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_GPIO_Init+0x314>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02b      	beq.n	8002602 <HAL_GPIO_Init+0x226>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_GPIO_Init+0x318>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d025      	beq.n	80025fe <HAL_GPIO_Init+0x222>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_GPIO_Init+0x31c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <HAL_GPIO_Init+0x21e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_GPIO_Init+0x320>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x21a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_GPIO_Init+0x324>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x216>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_GPIO_Init+0x328>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x212>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_GPIO_Init+0x32c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x20e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4b      	ldr	r2, [pc, #300]	; (800270c <HAL_GPIO_Init+0x330>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x20a>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00e      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025e6:	2308      	movs	r3, #8
 80025e8:	e00c      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025ea:	2306      	movs	r3, #6
 80025ec:	e00a      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025ee:	2305      	movs	r3, #5
 80025f0:	e008      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025f6:	2303      	movs	r3, #3
 80025f8:	e004      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_Init+0x228>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_GPIO_Init+0x228>
 8002602:	2300      	movs	r3, #0
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f002 0203 	and.w	r2, r2, #3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4093      	lsls	r3, r2
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002614:	4935      	ldr	r1, [pc, #212]	; (80026ec <HAL_GPIO_Init+0x310>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_GPIO_Init+0x334>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002646:	4a32      	ldr	r2, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x334>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_GPIO_Init+0x334>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002670:	4a27      	ldr	r2, [pc, #156]	; (8002710 <HAL_GPIO_Init+0x334>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <HAL_GPIO_Init+0x334>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269a:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x334>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_GPIO_Init+0x334>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_GPIO_Init+0x334>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	f67f ae90 	bls.w	80023f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40021000 	.word	0x40021000
 8002704:	40021400 	.word	0x40021400
 8002708:	40021800 	.word	0x40021800
 800270c:	40021c00 	.word	0x40021c00
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e264      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d075      	beq.n	8002882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	4ba3      	ldr	r3, [pc, #652]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d00c      	beq.n	80027bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4ba0      	ldr	r3, [pc, #640]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d112      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b9d      	ldr	r3, [pc, #628]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ba:	d10b      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	4b99      	ldr	r3, [pc, #612]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d05b      	beq.n	8002880 <HAL_RCC_OscConfig+0x108>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d157      	bne.n	8002880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e23f      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x74>
 80027de:	4b91      	ldr	r3, [pc, #580]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a90      	ldr	r2, [pc, #576]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e01d      	b.n	8002828 <HAL_RCC_OscConfig+0xb0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x98>
 80027f6:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a8a      	ldr	r2, [pc, #552]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a87      	ldr	r2, [pc, #540]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0xb0>
 8002810:	4b84      	ldr	r3, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a83      	ldr	r2, [pc, #524]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a80      	ldr	r2, [pc, #512]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fefa 	bl	8001628 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe fef6 	bl	8001628 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e204      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0xc0>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fee6 	bl	8001628 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fee2 	bl	8001628 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1f0      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0xe8>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d063      	beq.n	8002956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d11c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_RCC_OscConfig+0x152>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1c4      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ca:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4952      	ldr	r1, [pc, #328]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	e03a      	b.n	8002956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCC_OscConfig+0x2b0>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fe9b 	bl	8001628 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fe97 	bl	8001628 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1a5      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4940      	ldr	r1, [pc, #256]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292a:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_OscConfig+0x2b0>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fe7a 	bl	8001628 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002938:	f7fe fe76 	bl	8001628 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e184      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d030      	beq.n	80029c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_RCC_OscConfig+0x2b4>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fe5a 	bl	8001628 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002978:	f7fe fe56 	bl	8001628 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e164      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x200>
 8002996:	e015      	b.n	80029c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x2b4>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7fe fe43 	bl	8001628 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fe3f 	bl	8001628 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e14d      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a0 	beq.w	8002b12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x2b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d121      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCC_OscConfig+0x2b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_RCC_OscConfig+0x2b8>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fe05 	bl	8001628 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e011      	b.n	8002a46 <HAL_RCC_OscConfig+0x2ce>
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	42470e80 	.word	0x42470e80
 8002a30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe fdf8 	bl	8001628 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e106      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <HAL_RCC_OscConfig+0x4e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
 8002a5a:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a80      	ldr	r2, [pc, #512]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x32a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x312>
 8002a70:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a7a      	ldr	r2, [pc, #488]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a77      	ldr	r2, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x32a>
 8002a8a:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a74      	ldr	r2, [pc, #464]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b72      	ldr	r3, [pc, #456]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a71      	ldr	r2, [pc, #452]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fdbd 	bl	8001628 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fdb9 	bl	8001628 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0c5      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x33a>
 8002ad4:	e014      	b.n	8002b00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fda7 	bl	8001628 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fda3 	bl	8001628 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0af      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a55      	ldr	r2, [pc, #340]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 809b 	beq.w	8002c52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d05c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d141      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4ec>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fd77 	bl	8001628 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fd73 	bl	8001628 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e081      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	019b      	lsls	r3, r3, #6
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x4ec>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fd4c 	bl	8001628 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fd48 	bl	8001628 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e056      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x41c>
 8002bb2:	e04e      	b.n	8002c52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_OscConfig+0x4ec>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7fe fd35 	bl	8001628 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe fd31 	bl	8001628 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e03f      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x44a>
 8002be0:	e037      	b.n	8002c52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e032      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCC_OscConfig+0x4e8>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d028      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d121      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d11a      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c1e:	4013      	ands	r3, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d111      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	40023800 	.word	0x40023800
 8002c64:	42470060 	.word	0x42470060

08002c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0cc      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d90c      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0b8      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a58      	ldr	r2, [pc, #352]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd4:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	494d      	ldr	r1, [pc, #308]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d044      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d119      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e067      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4934      	ldr	r1, [pc, #208]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d58:	f7fe fc66 	bl	8001628 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7fe fc62 	bl	8001628 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e04f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 020c 	and.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1eb      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d20c      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e032      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4916      	ldr	r1, [pc, #88]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dee:	f000 f821 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	490a      	ldr	r1, [pc, #40]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	5ccb      	ldrb	r3, [r1, r3]
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fbc6 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023c00 	.word	0x40023c00
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08003068 	.word	0x08003068
 8002e2c:	20000030 	.word	0x20000030
 8002e30:	20000034 	.word	0x20000034

08002e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	2300      	movs	r3, #0
 8002e46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4c:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d00d      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x40>
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	f200 80bd 	bhi.w	8002fd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x34>
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e66:	e0b7      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e6a:	60bb      	str	r3, [r7, #8]
       break;
 8002e6c:	e0b7      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6e:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e70:	60bb      	str	r3, [r7, #8]
      break;
 8002e72:	e0b4      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04d      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b58      	ldr	r3, [pc, #352]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	461a      	mov	r2, r3
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	ea02 0800 	and.w	r8, r2, r0
 8002ea2:	ea03 0901 	and.w	r9, r3, r1
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	014b      	lsls	r3, r1, #5
 8002eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eb8:	0142      	lsls	r2, r0, #5
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	ebb0 0008 	subs.w	r0, r0, r8
 8002ec2:	eb61 0109 	sbc.w	r1, r1, r9
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ed4:	0182      	lsls	r2, r0, #6
 8002ed6:	1a12      	subs	r2, r2, r0
 8002ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	00d9      	lsls	r1, r3, #3
 8002ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eea:	00d0      	lsls	r0, r2, #3
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	eb12 0208 	adds.w	r2, r2, r8
 8002ef4:	eb43 0309 	adc.w	r3, r3, r9
 8002ef8:	f04f 0000 	mov.w	r0, #0
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	0259      	lsls	r1, r3, #9
 8002f02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f06:	0250      	lsls	r0, r2, #9
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	f7fd f956 	bl	80001c8 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4613      	mov	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e04a      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	ea02 0400 	and.w	r4, r2, r0
 8002f3e:	ea03 0501 	and.w	r5, r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	014b      	lsls	r3, r1, #5
 8002f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f54:	0142      	lsls	r2, r0, #5
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	1b00      	subs	r0, r0, r4
 8002f5c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	018b      	lsls	r3, r1, #6
 8002f6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f6e:	0182      	lsls	r2, r0, #6
 8002f70:	1a12      	subs	r2, r2, r0
 8002f72:	eb63 0301 	sbc.w	r3, r3, r1
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	00d9      	lsls	r1, r3, #3
 8002f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f84:	00d0      	lsls	r0, r2, #3
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	1912      	adds	r2, r2, r4
 8002f8c:	eb45 0303 	adc.w	r3, r5, r3
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	0299      	lsls	r1, r3, #10
 8002f9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f9e:	0290      	lsls	r0, r2, #10
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f7fd f90a 	bl	80001c8 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	60bb      	str	r3, [r7, #8]
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fda:	60bb      	str	r3, [r7, #8]
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	68bb      	ldr	r3, [r7, #8]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	; (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	; (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	; (800303c <__libc_init_array+0x44>)
 800300c:	f000 f820 	bl	8003050 <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	08003080 	.word	0x08003080
 8003034:	08003080 	.word	0x08003080
 8003038:	08003080 	.word	0x08003080
 800303c:	08003084 	.word	0x08003084

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
