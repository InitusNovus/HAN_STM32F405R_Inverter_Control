
STM32F405R_Inverter_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d94  08002d94  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d9c  08002d9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  08002db4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002db4  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a75a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002008  00000000  00000000  0002a79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b19  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3f1  00000000  00000000  0004e049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c48d6  00000000  00000000  0005843a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011cd10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac0  00000000  00000000  0011cd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d6c 	.word	0x08002d6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002d6c 	.word	0x08002d6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

	  //canTxHeader.StdId = (STM32_ID>>18)&0x7ff;
	  canTxHeader.ExtId = STM32_ID;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <GAS_Can_txSetting+0x28>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <GAS_Can_txSetting+0x2c>)
 80004ca:	6053      	str	r3, [r2, #4]
	  canTxHeader.IDE	= CAN_ID_EXT;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <GAS_Can_txSetting+0x2c>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	609a      	str	r2, [r3, #8]
	  canTxHeader.RTR	= CAN_RTR_DATA;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <GAS_Can_txSetting+0x2c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
	  canTxHeader.DLC	=	8;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <GAS_Can_txSetting+0x2c>)
 80004da:	2208      	movs	r2, #8
 80004dc:	611a      	str	r2, [r3, #16]


}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000058 	.word	0x20000058

080004f0 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	sFilterConfig.FilterIdHigh = 0x0000;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <GAS_Can_rxSetting+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <GAS_Can_rxSetting+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <GAS_Can_rxSetting+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <GAS_Can_rxSetting+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <GAS_Can_rxSetting+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <GAS_Can_rxSetting+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <GAS_Can_rxSetting+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <GAS_Can_rxSetting+0x58>)
 8000520:	2201      	movs	r2, #1
 8000522:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <GAS_Can_rxSetting+0x58>)
 8000526:	2201      	movs	r2, #1
 8000528:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <GAS_Can_rxSetting+0x58>)
 800052c:	220e      	movs	r2, #14
 800052e:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000530:	4905      	ldr	r1, [pc, #20]	; (8000548 <GAS_Can_rxSetting+0x58>)
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <GAS_Can_rxSetting+0x5c>)
 8000534:	f001 fbaa 	bl	8001c8c <HAL_CAN_ConfigFilter>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <GAS_Can_rxSetting+0x52>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 800053e:	f000 ff3f 	bl	80013c0 <Error_Handler>
	  }
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000030 	.word	0x20000030
 800054c:	200001a8 	.word	0x200001a8

08000550 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	GAS_Can_txSetting();
 8000554:	f7ff ffb4 	bl	80004c0 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8000558:	f7ff ffca 	bl	80004f0 <GAS_Can_rxSetting>


	HAL_CAN_Start(&hcan2);
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <GAS_Can_init+0x28>)
 800055e:	f001 fc75 	bl	8001e4c <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000562:	2102      	movs	r1, #2
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <GAS_Can_init+0x28>)
 8000566:	f001 fcb5 	bl	8001ed4 <HAL_CAN_ActivateNotification>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 8000570:	f000 ff26 	bl	80013c0 <Error_Handler>
//	Error_Handler();
//
//
//	}

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200001a8 	.word	0x200001a8

0800057c <GAS_Scheduler_init>:
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_SYSTICK_Callback(void);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
//	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }

	InverterControl_init();
 8000580:	f000 f878 	bl	8000674 <InverterControl_init>
//********ADC initialization********=

//********CAN initialization********
	GAS_Can_init();
 8000584:	f7ff ffe4 	bl	8000550 <GAS_Can_init>

//********PWM initialization********

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <HAL_SYSTICK_Callback>:
	InverterControl_Run_service();
}

//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
void HAL_SYSTICK_Callback(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <HAL_SYSTICK_Callback+0x7c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <HAL_SYSTICK_Callback+0x7c>)
 8000598:	6013      	str	r3, [r2, #0]

	gTask.flag_1ms=True;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HAL_SYSTICK_Callback+0x80>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]

	if(gTimerCnt % 10 == 0)
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_SYSTICK_Callback+0x7c>)
 80005a2:	6819      	ldr	r1, [r3, #0]
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <HAL_SYSTICK_Callback+0x84>)
 80005a6:	fb83 2301 	smull	r2, r3, r3, r1
 80005aa:	109a      	asrs	r2, r3, #2
 80005ac:	17cb      	asrs	r3, r1, #31
 80005ae:	1ad2      	subs	r2, r2, r3
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	1aca      	subs	r2, r1, r3
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	d102      	bne.n	80005c4 <HAL_SYSTICK_Callback+0x38>
	{
		gTask.flag_10ms=True;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <HAL_SYSTICK_Callback+0x80>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	705a      	strb	r2, [r3, #1]
	}

	if(gTimerCnt % 100 == 0)
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <HAL_SYSTICK_Callback+0x7c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_SYSTICK_Callback+0x88>)
 80005ca:	fb83 1302 	smull	r1, r3, r3, r2
 80005ce:	1159      	asrs	r1, r3, #5
 80005d0:	17d3      	asrs	r3, r2, #31
 80005d2:	1acb      	subs	r3, r1, r3
 80005d4:	2164      	movs	r1, #100	; 0x64
 80005d6:	fb01 f303 	mul.w	r3, r1, r3
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <HAL_SYSTICK_Callback+0x5a>
	{
		gTask.flag_100ms=True;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_SYSTICK_Callback+0x80>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	709a      	strb	r2, [r3, #2]
	}

	if(gTimerCnt == 1000)
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_SYSTICK_Callback+0x7c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ee:	d105      	bne.n	80005fc <HAL_SYSTICK_Callback+0x70>
	{
		gTask.flag_1000ms=True;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_SYSTICK_Callback+0x80>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	70da      	strb	r2, [r3, #3]
		gTimerCnt = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_SYSTICK_Callback+0x7c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
	}
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000b4 	.word	0x200000b4
 800060c:	200000ac 	.word	0x200000ac
 8000610:	66666667 	.word	0x66666667
 8000614:	51eb851f 	.word	0x51eb851f

08000618 <GAS_Scheduler>:

void GAS_Scheduler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	if(gTask.flag_1ms == True)
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <GAS_Scheduler+0x58>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b01      	cmp	r3, #1
 8000624:	d103      	bne.n	800062e <GAS_Scheduler+0x16>
	{
		gTask.flag_1ms = False;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <GAS_Scheduler+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
}
 800062c:	bf00      	nop
		GAS_Scheduler_taskCounter_1ms();
	}

	if(gTask.flag_10ms == True)
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <GAS_Scheduler+0x58>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b01      	cmp	r3, #1
 8000636:	d103      	bne.n	8000640 <GAS_Scheduler+0x28>
	{
		gTask.flag_10ms = False;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <GAS_Scheduler+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	705a      	strb	r2, [r3, #1]
}
 800063e:	bf00      	nop
		GAS_Scheduler_taskCounter_10ms();
	}

	if(gTask.flag_100ms == True)
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <GAS_Scheduler+0x58>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b01      	cmp	r3, #1
 8000648:	d103      	bne.n	8000652 <GAS_Scheduler+0x3a>
	{
		gTask.flag_100ms = False;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <GAS_Scheduler+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	709a      	strb	r2, [r3, #2]
}
 8000650:	bf00      	nop
		GAS_Scheduler_taskCounter_100ms();
	}

	if(gTask.flag_1000ms == True)
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <GAS_Scheduler+0x58>)
 8000654:	78db      	ldrb	r3, [r3, #3]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b01      	cmp	r3, #1
 800065a:	d103      	bne.n	8000664 <GAS_Scheduler+0x4c>
	{
		gTask.flag_1000ms = False;
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <GAS_Scheduler+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	70da      	strb	r2, [r3, #3]
}
 8000662:	bf00      	nop
	InverterControl_Run_service();
 8000664:	f000 f898 	bl	8000798 <InverterControl_Run_service>
}
 8000668:	bf00      	nop
	GAS_Scheduler_taskBackground();

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000ac 	.word	0x200000ac

08000674 <InverterControl_init>:
static void InverterControl_On_be2(InverterControl_Inverter_t* inv);
static void InverterControl_Off_be2(InverterControl_Inverter_t* inv);
static bool InverterControl_Read_ba3(InverterControl_Inverter_t* inv);

void InverterControl_init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	InverterControl.Inv1.be1.GPIOx = 	INVCON_INV1_BE1_GPIOX;
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <InverterControl_init+0x114>)
 800067a:	4a44      	ldr	r2, [pc, #272]	; (800078c <InverterControl_init+0x118>)
 800067c:	601a      	str	r2, [r3, #0]
	InverterControl.Inv1.be1.GPIO_Pin = INVCON_INV1_BE1_GPIOP;
 800067e:	4b42      	ldr	r3, [pc, #264]	; (8000788 <InverterControl_init+0x114>)
 8000680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000684:	809a      	strh	r2, [r3, #4]
	InverterControl.Inv1.be1.control =	InverterControl_io_none;
 8000686:	4b40      	ldr	r3, [pc, #256]	; (8000788 <InverterControl_init+0x114>)
 8000688:	2200      	movs	r2, #0
 800068a:	719a      	strb	r2, [r3, #6]
	InverterControl.Inv1.be2.GPIOx = 	INVCON_INV1_BE2_GPIOX;
 800068c:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <InverterControl_init+0x114>)
 800068e:	4a3f      	ldr	r2, [pc, #252]	; (800078c <InverterControl_init+0x118>)
 8000690:	609a      	str	r2, [r3, #8]
	InverterControl.Inv1.be2.GPIO_Pin = INVCON_INV1_BE2_GPIOP;
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <InverterControl_init+0x114>)
 8000694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000698:	819a      	strh	r2, [r3, #12]
	InverterControl.Inv1.be2.control = 	InverterControl_io_none;
 800069a:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <InverterControl_init+0x114>)
 800069c:	2200      	movs	r2, #0
 800069e:	739a      	strb	r2, [r3, #14]
	InverterControl.Inv1.ba3.GPIOx = 	INVCON_INV1_BA3_GPIOX;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <InverterControl_init+0x114>)
 80006a2:	4a3b      	ldr	r2, [pc, #236]	; (8000790 <InverterControl_init+0x11c>)
 80006a4:	611a      	str	r2, [r3, #16]
	InverterControl.Inv1.ba3.GPIO_Pin = INVCON_INV1_BA3_GPIOP;
 80006a6:	4b38      	ldr	r3, [pc, #224]	; (8000788 <InverterControl_init+0x114>)
 80006a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ac:	829a      	strh	r2, [r3, #20]
	InverterControl.Inv1.ba3.control =	InverterControl_io_none;
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <InverterControl_init+0x114>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	759a      	strb	r2, [r3, #22]

	InverterControl.Inv2.be1.GPIOx = 	INVCON_INV2_BE1_GPIOX;
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <InverterControl_init+0x114>)
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <InverterControl_init+0x11c>)
 80006b8:	619a      	str	r2, [r3, #24]
	InverterControl.Inv2.be1.GPIO_Pin = INVCON_INV2_BE1_GPIOP;
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <InverterControl_init+0x114>)
 80006bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c0:	839a      	strh	r2, [r3, #28]
	InverterControl.Inv2.be1.control =	InverterControl_io_none;
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <InverterControl_init+0x114>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	779a      	strb	r2, [r3, #30]
	InverterControl.Inv2.be2.GPIOx = 	INVCON_INV2_BE2_GPIOX;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <InverterControl_init+0x114>)
 80006ca:	4a31      	ldr	r2, [pc, #196]	; (8000790 <InverterControl_init+0x11c>)
 80006cc:	621a      	str	r2, [r3, #32]
	InverterControl.Inv2.be2.GPIO_Pin = INVCON_INV2_BE2_GPIOP;
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <InverterControl_init+0x114>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	849a      	strh	r2, [r3, #36]	; 0x24
	InverterControl.Inv2.be2.control = 	InverterControl_io_none;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <InverterControl_init+0x114>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	InverterControl.Inv2.ba3.GPIOx = 	INVCON_INV2_BA3_GPIOX;
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <InverterControl_init+0x114>)
 80006e0:	4a2b      	ldr	r2, [pc, #172]	; (8000790 <InverterControl_init+0x11c>)
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
	InverterControl.Inv2.ba3.GPIO_Pin = INVCON_INV2_BA3_GPIOP;
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <InverterControl_init+0x114>)
 80006e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ea:	859a      	strh	r2, [r3, #44]	; 0x2c
	InverterControl.Inv2.ba3.control =	InverterControl_io_none;
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <InverterControl_init+0x114>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	InverterControl.Inv3.be1.GPIOx = 	INVCON_INV3_BE1_GPIOX;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <InverterControl_init+0x114>)
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <InverterControl_init+0x118>)
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
	InverterControl.Inv3.be1.GPIO_Pin = INVCON_INV3_BE1_GPIOP;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <InverterControl_init+0x114>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	869a      	strh	r2, [r3, #52]	; 0x34
	InverterControl.Inv3.be1.control =	InverterControl_io_none;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <InverterControl_init+0x114>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	InverterControl.Inv3.be2.GPIOx = 	INVCON_INV3_BE2_GPIOX;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <InverterControl_init+0x114>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <InverterControl_init+0x118>)
 800070e:	639a      	str	r2, [r3, #56]	; 0x38
	InverterControl.Inv3.be2.GPIO_Pin = INVCON_INV3_BE2_GPIOP;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <InverterControl_init+0x114>)
 8000712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000716:	879a      	strh	r2, [r3, #60]	; 0x3c
	InverterControl.Inv3.be2.control = 	InverterControl_io_none;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <InverterControl_init+0x114>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	InverterControl.Inv3.ba3.GPIOx = 	INVCON_INV3_BA3_GPIOX;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <InverterControl_init+0x114>)
 8000722:	4a1a      	ldr	r2, [pc, #104]	; (800078c <InverterControl_init+0x118>)
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
	InverterControl.Inv3.ba3.GPIO_Pin = INVCON_INV3_BA3_GPIOP;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <InverterControl_init+0x114>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	InverterControl.Inv3.ba3.control =	InverterControl_io_none;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <InverterControl_init+0x114>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	InverterControl.Inv4.be1.GPIOx = 	INVCON_INV4_BE1_GPIOX;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <InverterControl_init+0x114>)
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <InverterControl_init+0x118>)
 800073a:	649a      	str	r2, [r3, #72]	; 0x48
	InverterControl.Inv4.be1.GPIO_Pin = INVCON_INV4_BE1_GPIOP;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <InverterControl_init+0x114>)
 800073e:	2240      	movs	r2, #64	; 0x40
 8000740:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	InverterControl.Inv4.be1.control =	InverterControl_io_none;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <InverterControl_init+0x114>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	InverterControl.Inv4.be2.GPIOx = 	INVCON_INV4_BE2_GPIOX;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <InverterControl_init+0x114>)
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <InverterControl_init+0x120>)
 8000750:	651a      	str	r2, [r3, #80]	; 0x50
	InverterControl.Inv4.be2.GPIO_Pin = INVCON_INV4_BE2_GPIOP;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <InverterControl_init+0x114>)
 8000754:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000758:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	InverterControl.Inv4.be2.control = 	InverterControl_io_none;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <InverterControl_init+0x114>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	InverterControl.Inv4.ba3.GPIOx = 	INVCON_INV4_BA3_GPIOX;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <InverterControl_init+0x114>)
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <InverterControl_init+0x120>)
 8000768:	659a      	str	r2, [r3, #88]	; 0x58
	InverterControl.Inv4.ba3.GPIO_Pin = INVCON_INV4_BA3_GPIOP;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <InverterControl_init+0x114>)
 800076c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	InverterControl.Inv4.ba3.control =	InverterControl_io_none;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <InverterControl_init+0x114>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000b8 	.word	0x200000b8
 800078c:	40020800 	.word	0x40020800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400

08000798 <InverterControl_Run_service>:

void InverterControl_Run_service(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b098      	sub	sp, #96	; 0x60
 800079c:	af00      	add	r7, sp, #0
 800079e:	4b7e      	ldr	r3, [pc, #504]	; (8000998 <InverterControl_Run_service+0x200>)
 80007a0:	617b      	str	r3, [r7, #20]

}

static inline __attribute__((always_inline)) void InverterControl_Update_io(InverterControl_Inverter_t* inv)
{
	if(inv->be1.control == InverterControl_io_reset)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	799b      	ldrb	r3, [r3, #6]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d11a      	bne.n	80007e0 <InverterControl_Run_service+0x48>
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	613b      	str	r3, [r7, #16]
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
}

static inline __attribute__((always_inline)) void InverterControl_Off_be1(InverterControl_Inverter_t* inv)
{
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	889b      	ldrh	r3, [r3, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	f001 fe51 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4610      	mov	r0, r2
 80007ca:	f001 fe31 	bl	8002430 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	71da      	strb	r2, [r3, #7]
}
 80007de:	e01e      	b.n	800081e <InverterControl_Run_service+0x86>
	else if(inv->be1.control == InverterControl_io_set)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	799b      	ldrb	r3, [r3, #6]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d11a      	bne.n	800081e <InverterControl_Run_service+0x86>
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	889b      	ldrh	r3, [r3, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 fe32 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	889b      	ldrh	r3, [r3, #4]
 8000804:	4619      	mov	r1, r3
 8000806:	4610      	mov	r0, r2
 8000808:	f001 fe12 	bl	8002430 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf14      	ite	ne
 8000812:	2301      	movne	r3, #1
 8000814:	2300      	moveq	r3, #0
 8000816:	b2da      	uxtb	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	71da      	strb	r2, [r3, #7]
}
 800081c:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2200      	movs	r2, #0
 8000822:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	7b9b      	ldrb	r3, [r3, #14]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d11a      	bne.n	8000862 <InverterControl_Run_service+0xca>
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	60bb      	str	r3, [r7, #8]
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
}

static inline __attribute__((always_inline)) void InverterControl_Off_be2(InverterControl_Inverter_t* inv)
{
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	6898      	ldr	r0, [r3, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	899b      	ldrh	r3, [r3, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	f001 fe10 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	899b      	ldrh	r3, [r3, #12]
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f001 fdf0 	bl	8002430 <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf14      	ite	ne
 8000856:	2301      	movne	r3, #1
 8000858:	2300      	moveq	r3, #0
 800085a:	b2da      	uxtb	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	73da      	strb	r2, [r3, #15]
}
 8000860:	e01e      	b.n	80008a0 <InverterControl_Run_service+0x108>
	else if(inv->be2.control == InverterControl_io_set)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	7b9b      	ldrb	r3, [r3, #14]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d11a      	bne.n	80008a0 <InverterControl_Run_service+0x108>
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6898      	ldr	r0, [r3, #8]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	899b      	ldrh	r3, [r3, #12]
 8000876:	2201      	movs	r2, #1
 8000878:	4619      	mov	r1, r3
 800087a:	f001 fdf1 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	899b      	ldrh	r3, [r3, #12]
 8000886:	4619      	mov	r1, r3
 8000888:	4610      	mov	r0, r2
 800088a:	f001 fdd1 	bl	8002430 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	73da      	strb	r2, [r3, #15]
}
 800089e:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2200      	movs	r2, #0
 80008a4:	739a      	strb	r2, [r3, #14]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	603b      	str	r3, [r7, #0]

static inline __attribute__((always_inline)) bool InverterControl_Read_ba3(InverterControl_Inverter_t* inv)
{
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	8a9b      	ldrh	r3, [r3, #20]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4610      	mov	r0, r2
 80008b6:	f001 fdbb 	bl	8002430 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf14      	ite	ne
 80008c0:	2301      	movne	r3, #1
 80008c2:	2300      	moveq	r3, #0
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2200      	movs	r2, #0
 80008ce:	759a      	strb	r2, [r3, #22]
}
 80008d0:	bf00      	nop
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <InverterControl_Run_service+0x204>)
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(inv->be1.control == InverterControl_io_reset)
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	799b      	ldrb	r3, [r3, #6]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d11a      	bne.n	8000914 <InverterControl_Run_service+0x17c>
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 80008e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e8:	889b      	ldrh	r3, [r3, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	f001 fdb7 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 80008f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4610      	mov	r0, r2
 80008fe:	f001 fd97 	bl	8002430 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf14      	ite	ne
 8000908:	2301      	movne	r3, #1
 800090a:	2300      	moveq	r3, #0
 800090c:	b2da      	uxtb	r2, r3
 800090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000910:	71da      	strb	r2, [r3, #7]
}
 8000912:	e01e      	b.n	8000952 <InverterControl_Run_service+0x1ba>
	else if(inv->be1.control == InverterControl_io_set)
 8000914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000916:	799b      	ldrb	r3, [r3, #6]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d11a      	bne.n	8000952 <InverterControl_Run_service+0x1ba>
 800091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	889b      	ldrh	r3, [r3, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	f001 fd98 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	889b      	ldrh	r3, [r3, #4]
 8000938:	4619      	mov	r1, r3
 800093a:	4610      	mov	r0, r2
 800093c:	f001 fd78 	bl	8002430 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf14      	ite	ne
 8000946:	2301      	movne	r3, #1
 8000948:	2300      	moveq	r3, #0
 800094a:	b2da      	uxtb	r2, r3
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	71da      	strb	r2, [r3, #7]
}
 8000950:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	2200      	movs	r2, #0
 8000956:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095a:	7b9b      	ldrb	r3, [r3, #14]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d11f      	bne.n	80009a0 <InverterControl_Run_service+0x208>
 8000960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000962:	623b      	str	r3, [r7, #32]
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	6898      	ldr	r0, [r3, #8]
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	899b      	ldrh	r3, [r3, #12]
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	f001 fd76 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	899b      	ldrh	r3, [r3, #12]
 800097c:	4619      	mov	r1, r3
 800097e:	4610      	mov	r0, r2
 8000980:	f001 fd56 	bl	8002430 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2da      	uxtb	r2, r3
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	73da      	strb	r2, [r3, #15]
}
 8000994:	e023      	b.n	80009de <InverterControl_Run_service+0x246>
 8000996:	bf00      	nop
 8000998:	200000b8 	.word	0x200000b8
 800099c:	200000d0 	.word	0x200000d0
	else if(inv->be2.control == InverterControl_io_set)
 80009a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a2:	7b9b      	ldrb	r3, [r3, #14]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d11a      	bne.n	80009de <InverterControl_Run_service+0x246>
 80009a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	6898      	ldr	r0, [r3, #8]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	899b      	ldrh	r3, [r3, #12]
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	f001 fd52 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	899b      	ldrh	r3, [r3, #12]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4610      	mov	r0, r2
 80009c8:	f001 fd32 	bl	8002430 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf14      	ite	ne
 80009d2:	2301      	movne	r3, #1
 80009d4:	2300      	moveq	r3, #0
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	73da      	strb	r2, [r3, #15]
}
 80009dc:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	2200      	movs	r2, #0
 80009e2:	739a      	strb	r2, [r3, #14]
 80009e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e6:	61bb      	str	r3, [r7, #24]
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	691a      	ldr	r2, [r3, #16]
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	8a9b      	ldrh	r3, [r3, #20]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f001 fd1c 	bl	8002430 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	759a      	strb	r2, [r3, #22]
}
 8000a0e:	bf00      	nop
 8000a10:	4b9b      	ldr	r3, [pc, #620]	; (8000c80 <InverterControl_Run_service+0x4e8>)
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
	if(inv->be1.control == InverterControl_io_reset)
 8000a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a16:	799b      	ldrb	r3, [r3, #6]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d11a      	bne.n	8000a52 <InverterControl_Run_service+0x2ba>
 8000a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a1e:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 8000a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f001 fd18 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	f001 fcf8 	bl	8002430 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a4e:	71da      	strb	r2, [r3, #7]
}
 8000a50:	e01e      	b.n	8000a90 <InverterControl_Run_service+0x2f8>
	else if(inv->be1.control == InverterControl_io_set)
 8000a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a54:	799b      	ldrb	r3, [r3, #6]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d11a      	bne.n	8000a90 <InverterControl_Run_service+0x2f8>
 8000a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 8000a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f001 fcf9 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f001 fcd9 	bl	8002430 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8c:	71da      	strb	r2, [r3, #7]
}
 8000a8e:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 8000a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a92:	2200      	movs	r2, #0
 8000a94:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a98:	7b9b      	ldrb	r3, [r3, #14]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d11a      	bne.n	8000ad4 <InverterControl_Run_service+0x33c>
 8000a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa4:	6898      	ldr	r0, [r3, #8]
 8000aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa8:	899b      	ldrh	r3, [r3, #12]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	f001 fcd7 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab8:	899b      	ldrh	r3, [r3, #12]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4610      	mov	r0, r2
 8000abe:	f001 fcb7 	bl	8002430 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad0:	73da      	strb	r2, [r3, #15]
}
 8000ad2:	e01e      	b.n	8000b12 <InverterControl_Run_service+0x37a>
	else if(inv->be2.control == InverterControl_io_set)
 8000ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ad6:	7b9b      	ldrb	r3, [r3, #14]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d11a      	bne.n	8000b12 <InverterControl_Run_service+0x37a>
 8000adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 8000ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae2:	6898      	ldr	r0, [r3, #8]
 8000ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae6:	899b      	ldrh	r3, [r3, #12]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4619      	mov	r1, r3
 8000aec:	f001 fcb8 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f001 fc98 	bl	8002430 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf14      	ite	ne
 8000b06:	2301      	movne	r3, #1
 8000b08:	2300      	moveq	r3, #0
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	73da      	strb	r2, [r3, #15]
}
 8000b10:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 8000b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b14:	2200      	movs	r2, #0
 8000b16:	739a      	strb	r2, [r3, #14]
 8000b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b22:	8a9b      	ldrh	r3, [r3, #20]
 8000b24:	4619      	mov	r1, r3
 8000b26:	4610      	mov	r0, r2
 8000b28:	f001 fc82 	bl	8002430 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bf14      	ite	ne
 8000b32:	2301      	movne	r3, #1
 8000b34:	2300      	moveq	r3, #0
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3a:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 8000b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b3e:	2200      	movs	r2, #0
 8000b40:	759a      	strb	r2, [r3, #22]
}
 8000b42:	bf00      	nop
 8000b44:	4b4f      	ldr	r3, [pc, #316]	; (8000c84 <InverterControl_Run_service+0x4ec>)
 8000b46:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(inv->be1.control == InverterControl_io_reset)
 8000b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b4a:	799b      	ldrb	r3, [r3, #6]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d11a      	bne.n	8000b86 <InverterControl_Run_service+0x3ee>
 8000b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b52:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_RESET);
 8000b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b5a:	889b      	ldrh	r3, [r3, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f001 fc7e 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b6a:	889b      	ldrh	r3, [r3, #4]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f001 fc5e 	bl	8002430 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b82:	71da      	strb	r2, [r3, #7]
}
 8000b84:	e01e      	b.n	8000bc4 <InverterControl_Run_service+0x42c>
	else if(inv->be1.control == InverterControl_io_set)
 8000b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b88:	799b      	ldrb	r3, [r3, #6]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d11a      	bne.n	8000bc4 <InverterControl_Run_service+0x42c>
 8000b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b90:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_GPIO_WritePin(inv->be1.GPIOx,inv->be1.GPIO_Pin,GPIO_PIN_SET);
 8000b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f001 fc5f 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be1.status = (bool)HAL_GPIO_ReadPin(inv->be1.GPIOx,inv->be1.GPIO_Pin);
 8000ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ba8:	889b      	ldrh	r3, [r3, #4]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4610      	mov	r0, r2
 8000bae:	f001 fc3f 	bl	8002430 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bc0:	71da      	strb	r2, [r3, #7]
}
 8000bc2:	bf00      	nop
	inv->be1.control = InverterControl_io_none;
 8000bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	719a      	strb	r2, [r3, #6]
	if(inv->be2.control == InverterControl_io_reset)
 8000bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bcc:	7b9b      	ldrb	r3, [r3, #14]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d11a      	bne.n	8000c08 <InverterControl_Run_service+0x470>
 8000bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bd4:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_RESET);
 8000bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd8:	6898      	ldr	r0, [r3, #8]
 8000bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bdc:	899b      	ldrh	r3, [r3, #12]
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	f001 fc3d 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bec:	899b      	ldrh	r3, [r3, #12]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f001 fc1d 	bl	8002430 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c04:	73da      	strb	r2, [r3, #15]
}
 8000c06:	e01e      	b.n	8000c46 <InverterControl_Run_service+0x4ae>
	else if(inv->be2.control == InverterControl_io_set)
 8000c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c0a:	7b9b      	ldrb	r3, [r3, #14]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d11a      	bne.n	8000c46 <InverterControl_Run_service+0x4ae>
 8000c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_WritePin(inv->be2.GPIOx,inv->be2.GPIO_Pin,GPIO_PIN_SET);
 8000c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c16:	6898      	ldr	r0, [r3, #8]
 8000c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c1a:	899b      	ldrh	r3, [r3, #12]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f001 fc1e 	bl	8002460 <HAL_GPIO_WritePin>
	inv->be2.status = (bool)HAL_GPIO_ReadPin(inv->be2.GPIOx,inv->be2.GPIO_Pin);
 8000c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2a:	899b      	ldrh	r3, [r3, #12]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4610      	mov	r0, r2
 8000c30:	f001 fbfe 	bl	8002430 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf14      	ite	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c42:	73da      	strb	r2, [r3, #15]
}
 8000c44:	bf00      	nop
	inv->be2.control = InverterControl_io_none;
 8000c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	739a      	strb	r2, [r3, #14]
 8000c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
	inv->ba3.status = (bool)HAL_GPIO_ReadPin(inv->ba3.GPIOx,inv->ba3.GPIO_Pin);
 8000c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c56:	8a9b      	ldrh	r3, [r3, #20]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f001 fbe8 	bl	8002430 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c6e:	75da      	strb	r2, [r3, #23]
	inv->ba3.control = InverterControl_io_none;
 8000c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c72:	2200      	movs	r2, #0
 8000c74:	759a      	strb	r2, [r3, #22]
}
 8000c76:	bf00      	nop
}
 8000c78:	bf00      	nop
 8000c7a:	3760      	adds	r7, #96	; 0x60
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000e8 	.word	0x200000e8
 8000c84:	20000100 	.word	0x20000100

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <MX_ADC1_Init+0x9c>)
 8000c9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ca6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <MX_ADC1_Init+0xa0>)
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000cea:	f000 fc71 	bl	80015d0 <HAL_ADC_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cf4:	f000 fb64 	bl	80013c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_ADC1_Init+0x98>)
 8000d0a:	f000 fca5 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d14:	f000 fb54 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000160 	.word	0x20000160
 8000d24:	40012000 	.word	0x40012000
 8000d28:	0f000001 	.word	0x0f000001

08000d2c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_ADC2_Init+0x9c>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <MX_ADC2_Init+0xa0>)
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000d8e:	f000 fc1f 	bl	80015d0 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000d98:	f000 fb12 	bl	80013c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_ADC2_Init+0x98>)
 8000dae:	f000 fc53 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000db8:	f000 fb02 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000118 	.word	0x20000118
 8000dc8:	40012100 	.word	0x40012100
 8000dcc:	0f000001 	.word	0x0f000001

08000dd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <HAL_ADC_MspInit+0xd8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d128      	bne.n	8000e44 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a25      	ldr	r2, [pc, #148]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <HAL_ADC_MspInit+0xe0>)
 8000e3e:	f001 f95b 	bl	80020f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e42:	e02c      	b.n	8000e9e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d127      	bne.n	8000e9e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23f0      	movs	r3, #240	; 0xf0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_ADC_MspInit+0xe0>)
 8000e9a:	f001 f92d 	bl	80020f8 <HAL_GPIO_Init>
}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	; 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40012100 	.word	0x40012100

08000eb8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <MX_CAN1_Init+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eda:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ede:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ee2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_CAN1_Init+0x64>)
 8000f0a:	f000 fdc3 	bl	8001a94 <HAL_CAN_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f14:	f000 fa54 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001d0 	.word	0x200001d0
 8000f20:	40006400 	.word	0x40006400

08000f24 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <MX_CAN2_Init+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f46:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f4e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_CAN2_Init+0x64>)
 8000f76:	f000 fd8d 	bl	8001a94 <HAL_CAN_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f80:	f000 fa1e 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200001a8 	.word	0x200001a8
 8000f8c:	40006800 	.word	0x40006800

08000f90 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <HAL_CAN_MspInit+0x12c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d136      	bne.n	8001020 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_CAN_MspInit+0x130>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <HAL_CAN_MspInit+0x130>)
 8000fba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_CAN_MspInit+0x130>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10d      	bne.n	8000fe0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8000fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a36      	ldr	r2, [pc, #216]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ffc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800100e:	2309      	movs	r3, #9
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <HAL_CAN_MspInit+0x138>)
 800101a:	f001 f86d 	bl	80020f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800101e:	e048      	b.n	80010b2 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a29      	ldr	r2, [pc, #164]	; (80010cc <HAL_CAN_MspInit+0x13c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d143      	bne.n	80010b2 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8001034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_CAN_MspInit+0x130>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_CAN_MspInit+0x130>)
 800104e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_CAN_MspInit+0x130>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10d      	bne.n	8001074 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8001062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_CAN_MspInit+0x134>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001090:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010a2:	2309      	movs	r3, #9
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <HAL_CAN_MspInit+0x140>)
 80010ae:	f001 f823 	bl	80020f8 <HAL_GPIO_Init>
}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	; 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40006400 	.word	0x40006400
 80010c0:	2000002c 	.word	0x2000002c
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40006800 	.word	0x40006800
 80010d0:	40020400 	.word	0x40020400

080010d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <MX_GPIO_Init+0x1d8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a6e      	ldr	r2, [pc, #440]	; (80012ac <MX_GPIO_Init+0x1d8>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <MX_GPIO_Init+0x1d8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b68      	ldr	r3, [pc, #416]	; (80012ac <MX_GPIO_Init+0x1d8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a67      	ldr	r2, [pc, #412]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b61      	ldr	r3, [pc, #388]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a60      	ldr	r2, [pc, #384]	; (80012ac <MX_GPIO_Init+0x1d8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a59      	ldr	r2, [pc, #356]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b57      	ldr	r3, [pc, #348]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a52      	ldr	r2, [pc, #328]	; (80012ac <MX_GPIO_Init+0x1d8>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <MX_GPIO_Init+0x1d8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	484c      	ldr	r0, [pc, #304]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 800117e:	f001 f96f 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6174 	mov.w	r1, #3904	; 0xf40
 8001188:	484a      	ldr	r0, [pc, #296]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 800118a:	f001 f969 	bl	8002460 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001194:	4848      	ldr	r0, [pc, #288]	; (80012b8 <MX_GPIO_Init+0x1e4>)
 8001196:	f001 f963 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC3 PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800119a:	f24f 0339 	movw	r3, #61497	; 0xf039
 800119e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4841      	ldr	r0, [pc, #260]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 80011b0:	f000 ffa2 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011b4:	2386      	movs	r3, #134	; 0x86
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	483b      	ldr	r0, [pc, #236]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 80011c8:	f000 ff96 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80011cc:	2309      	movs	r3, #9
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4836      	ldr	r0, [pc, #216]	; (80012b8 <MX_GPIO_Init+0x1e4>)
 80011e0:	f000 ff8a 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80011e4:	f640 73f7 	movw	r3, #4087	; 0xff7
 80011e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	482d      	ldr	r0, [pc, #180]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 80011fa:	f000 ff7d 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4827      	ldr	r0, [pc, #156]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001214:	f000 ff70 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001232:	f000 ff61 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001236:	f44f 6374 	mov.w	r3, #3904	; 0xf40
 800123a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 8001250:	f000 ff52 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001254:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_GPIO_Init+0x1e4>)
 800126a:	f000 ff45 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0x1e4>)
 8001288:	f000 ff36 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800128c:	2304      	movs	r3, #4
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <MX_GPIO_Init+0x1e8>)
 80012a0:	f000 ff2a 	bl	80020f8 <HAL_GPIO_Init>

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c4:	f000 f912 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c8:	f000 f810 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012cc:	f7ff ff02 	bl	80010d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012d0:	f7ff fcda 	bl	8000c88 <MX_ADC1_Init>
  MX_CAN2_Init();
 80012d4:	f7ff fe26 	bl	8000f24 <MX_CAN2_Init>
  MX_CAN1_Init();
 80012d8:	f7ff fdee 	bl	8000eb8 <MX_CAN1_Init>
  MX_ADC2_Init();
 80012dc:	f7ff fd26 	bl	8000d2c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 80012e0:	f7ff f94c 	bl	800057c <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_Scheduler();
 80012e4:	f7ff f998 	bl	8000618 <GAS_Scheduler>
 80012e8:	e7fc      	b.n	80012e4 <main+0x24>
	...

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	; 0x50
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2230      	movs	r2, #48	; 0x30
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fd2e 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <SystemClock_Config+0xcc>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <SystemClock_Config+0xd0>)
 8001336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001360:	23a8      	movs	r3, #168	; 0xa8
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001368:	2307      	movs	r3, #7
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f001 f88f 	bl	8002494 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800137c:	f000 f820 	bl	80013c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800138c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2105      	movs	r1, #5
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 faf0 	bl	8002984 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013aa:	f000 f809 	bl	80013c0 <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	; 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f892 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800146c:	f000 fe3d 	bl	80020ea <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b4:	4c0b      	ldr	r4, [pc, #44]	; (80014e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014c2:	f7ff ffd7 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f001 fc25 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff fef9 	bl	80012c0 <main>
  bx  lr    
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014dc:	08002da4 	.word	0x08002da4
  ldr r2, =_sbss
 80014e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014e4:	200001fc 	.word	0x200001fc

080014e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_Init+0x40>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_Init+0x40>)
 8001502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x40>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fdb5 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff ff54 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fdbf 	bl	80020d2 <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 fd95 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000004 	.word	0x20000004
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	200001f8 	.word	0x200001f8

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200001f8 	.word	0x200001f8

080015d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e033      	b.n	800164e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fbee 	bl	8000dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001616:	f023 0302 	bic.w	r3, r3, #2
 800161a:	f043 0202 	orr.w	r2, r3, #2
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f93a 	bl	800189c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
 800163e:	e001      	b.n	8001644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1c>
 8001670:	2302      	movs	r3, #2
 8001672:	e105      	b.n	8001880 <HAL_ADC_ConfigChannel+0x228>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b09      	cmp	r3, #9
 8001682:	d925      	bls.n	80016d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68d9      	ldr	r1, [r3, #12]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	3b1e      	subs	r3, #30
 800169a:	2207      	movs	r2, #7
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43da      	mvns	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	400a      	ands	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68d9      	ldr	r1, [r3, #12]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	4603      	mov	r3, r0
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4403      	add	r3, r0
 80016c2:	3b1e      	subs	r3, #30
 80016c4:	409a      	lsls	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	e022      	b.n	8001716 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6919      	ldr	r1, [r3, #16]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	2207      	movs	r2, #7
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	400a      	ands	r2, r1
 80016f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	4603      	mov	r3, r0
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4403      	add	r3, r0
 800170c:	409a      	lsls	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b06      	cmp	r3, #6
 800171c:	d824      	bhi.n	8001768 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3b05      	subs	r3, #5
 8001730:	221f      	movs	r2, #31
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	400a      	ands	r2, r1
 800173e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	3b05      	subs	r3, #5
 800175a:	fa00 f203 	lsl.w	r2, r0, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	635a      	str	r2, [r3, #52]	; 0x34
 8001766:	e04c      	b.n	8001802 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d824      	bhi.n	80017ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	3b23      	subs	r3, #35	; 0x23
 8001782:	221f      	movs	r2, #31
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43da      	mvns	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	400a      	ands	r2, r1
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b23      	subs	r3, #35	; 0x23
 80017ac:	fa00 f203 	lsl.w	r2, r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
 80017b8:	e023      	b.n	8001802 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b41      	subs	r3, #65	; 0x41
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	400a      	ands	r2, r1
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b41      	subs	r3, #65	; 0x41
 80017f6:	fa00 f203 	lsl.w	r2, r0, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_ADC_ConfigChannel+0x234>)
 8001804:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_ADC_ConfigChannel+0x238>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d109      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1cc>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d105      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_ADC_ConfigChannel+0x238>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d123      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x21e>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d003      	beq.n	800183e <HAL_ADC_ConfigChannel+0x1e6>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b11      	cmp	r3, #17
 800183c:	d11b      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d111      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_ADC_ConfigChannel+0x23c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_ADC_ConfigChannel+0x240>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9a      	lsrs	r2, r3, #18
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001868:	e002      	b.n	8001870 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f9      	bne.n	800186a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40012300 	.word	0x40012300
 8001890:	40012000 	.word	0x40012000
 8001894:	20000004 	.word	0x20000004
 8001898:	431bde83 	.word	0x431bde83

0800189c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a4:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <ADC_Init+0x1f0>)
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	431a      	orrs	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	021a      	lsls	r2, r3, #8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <ADC_Init+0x1f4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d022      	beq.n	800197a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6899      	ldr	r1, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e00f      	b.n	800199a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0202 	bic.w	r2, r2, #2
 80019a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e1b      	ldrb	r3, [r3, #24]
 80019b4:	005a      	lsls	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6859      	ldr	r1, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	3b01      	subs	r3, #1
 80019f4:	035a      	lsls	r2, r3, #13
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	e007      	b.n	8001a10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	051a      	lsls	r2, r3, #20
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a52:	025a      	lsls	r2, r3, #9
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	029a      	lsls	r2, r3, #10
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40012300 	.word	0x40012300
 8001a90:	0f000001 	.word	0x0f000001

08001a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0ed      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fa6c 	bl	8000f90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0202 	bic.w	r2, r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac8:	f7ff fd76 	bl	80015b8 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ace:	e012      	b.n	8001af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad0:	f7ff fd72 	bl	80015b8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b0a      	cmp	r3, #10
 8001adc:	d90b      	bls.n	8001af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2205      	movs	r2, #5
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0c5      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e5      	bne.n	8001ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b14:	f7ff fd50 	bl	80015b8 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b1a:	e012      	b.n	8001b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b1c:	f7ff fd4c 	bl	80015b8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b0a      	cmp	r3, #10
 8001b28:	d90b      	bls.n	8001b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e09f      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0e5      	beq.n	8001b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e1b      	ldrb	r3, [r3, #24]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7e5b      	ldrb	r3, [r3, #25]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e9b      	ldrb	r3, [r3, #26]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0220 	bic.w	r2, r2, #32
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7edb      	ldrb	r3, [r3, #27]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0210 	bic.w	r2, r2, #16
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0210 	orr.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f1b      	ldrb	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0208 	orr.w	r2, r2, #8
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7f5b      	ldrb	r3, [r3, #29]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0204 	orr.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	ea42 0103 	orr.w	r1, r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	1e5a      	subs	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d003      	beq.n	8001cb2 <HAL_CAN_ConfigFilter+0x26>
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	f040 80be 	bne.w	8001e2e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_CAN_ConfigFilter+0x1bc>)
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ccc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d123      	bne.n	8001d5c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3248      	adds	r2, #72	; 0x48
 8001d3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	3348      	adds	r3, #72	; 0x48
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d122      	bne.n	8001daa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d84:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3248      	adds	r2, #72	; 0x48
 8001d8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001da0:	6979      	ldr	r1, [r7, #20]
 8001da2:	3348      	adds	r3, #72	; 0x48
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dc4:	e007      	b.n	8001dd6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e20:	f023 0201 	bic.w	r2, r3, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40006400 	.word	0x40006400

08001e4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d12e      	bne.n	8001ebe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e78:	f7ff fb9e 	bl	80015b8 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e7e:	e012      	b.n	8001ea6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e80:	f7ff fb9a 	bl	80015b8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	d90b      	bls.n	8001ea6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e012      	b.n	8001ecc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e5      	bne.n	8001e80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e006      	b.n	8001ecc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d002      	beq.n	8001ef2 <HAL_CAN_ActivateNotification+0x1e>
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d109      	bne.n	8001f06 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6959      	ldr	r1, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e006      	b.n	8001f14 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff47 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff5c 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffb0 	bl	8002040 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80020ee:	f7fe fa4d 	bl	800058c <HAL_SYSTICK_Callback>
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e16b      	b.n	80023ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	f040 815a 	bne.w	80023e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d005      	beq.n	800214a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002146:	2b02      	cmp	r3, #2
 8002148:	d130      	bne.n	80021ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0201 	and.w	r2, r3, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d017      	beq.n	80021e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d123      	bne.n	800223c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	69b9      	ldr	r1, [r7, #24]
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80b4 	beq.w	80023e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b60      	ldr	r3, [pc, #384]	; (8002404 <HAL_GPIO_Init+0x30c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a5f      	ldr	r2, [pc, #380]	; (8002404 <HAL_GPIO_Init+0x30c>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_GPIO_Init+0x30c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229a:	4a5b      	ldr	r2, [pc, #364]	; (8002408 <HAL_GPIO_Init+0x310>)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_GPIO_Init+0x314>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <HAL_GPIO_Init+0x226>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a51      	ldr	r2, [pc, #324]	; (8002410 <HAL_GPIO_Init+0x318>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d025      	beq.n	800231a <HAL_GPIO_Init+0x222>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a50      	ldr	r2, [pc, #320]	; (8002414 <HAL_GPIO_Init+0x31c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <HAL_GPIO_Init+0x21e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4f      	ldr	r2, [pc, #316]	; (8002418 <HAL_GPIO_Init+0x320>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d019      	beq.n	8002312 <HAL_GPIO_Init+0x21a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4e      	ldr	r2, [pc, #312]	; (800241c <HAL_GPIO_Init+0x324>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0x216>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4d      	ldr	r2, [pc, #308]	; (8002420 <HAL_GPIO_Init+0x328>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00d      	beq.n	800230a <HAL_GPIO_Init+0x212>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_GPIO_Init+0x32c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <HAL_GPIO_Init+0x20e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <HAL_GPIO_Init+0x330>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_GPIO_Init+0x20a>
 80022fe:	2307      	movs	r3, #7
 8002300:	e00e      	b.n	8002320 <HAL_GPIO_Init+0x228>
 8002302:	2308      	movs	r3, #8
 8002304:	e00c      	b.n	8002320 <HAL_GPIO_Init+0x228>
 8002306:	2306      	movs	r3, #6
 8002308:	e00a      	b.n	8002320 <HAL_GPIO_Init+0x228>
 800230a:	2305      	movs	r3, #5
 800230c:	e008      	b.n	8002320 <HAL_GPIO_Init+0x228>
 800230e:	2304      	movs	r3, #4
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x228>
 8002312:	2303      	movs	r3, #3
 8002314:	e004      	b.n	8002320 <HAL_GPIO_Init+0x228>
 8002316:	2302      	movs	r3, #2
 8002318:	e002      	b.n	8002320 <HAL_GPIO_Init+0x228>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x228>
 800231e:	2300      	movs	r3, #0
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	f002 0203 	and.w	r2, r2, #3
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	4093      	lsls	r3, r2
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002330:	4935      	ldr	r1, [pc, #212]	; (8002408 <HAL_GPIO_Init+0x310>)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_GPIO_Init+0x334>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <HAL_GPIO_Init+0x334>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_GPIO_Init+0x334>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_GPIO_Init+0x334>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_GPIO_Init+0x334>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_GPIO_Init+0x334>)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_GPIO_Init+0x334>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_GPIO_Init+0x334>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	f67f ae90 	bls.w	8002114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40013800 	.word	0x40013800
 800240c:	40020000 	.word	0x40020000
 8002410:	40020400 	.word	0x40020400
 8002414:	40020800 	.word	0x40020800
 8002418:	40020c00 	.word	0x40020c00
 800241c:	40021000 	.word	0x40021000
 8002420:	40021400 	.word	0x40021400
 8002424:	40021800 	.word	0x40021800
 8002428:	40021c00 	.word	0x40021c00
 800242c:	40013c00 	.word	0x40013c00

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e264      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d075      	beq.n	800259e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	4ba3      	ldr	r3, [pc, #652]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b9d      	ldr	r3, [pc, #628]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b99      	ldr	r3, [pc, #612]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e23f      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x74>
 80024fa:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a90      	ldr	r2, [pc, #576]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a8a      	ldr	r2, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a87      	ldr	r2, [pc, #540]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 800252c:	4b84      	ldr	r3, [pc, #528]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a83      	ldr	r2, [pc, #524]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a80      	ldr	r2, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff f834 	bl	80015b8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff f830 	bl	80015b8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e204      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f820 	bl	80015b8 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff f81c 	bl	80015b8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1f0      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0xe8>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c4      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4952      	ldr	r1, [pc, #328]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe ffd5 	bl	80015b8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe ffd1 	bl	80015b8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a5      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4940      	ldr	r1, [pc, #256]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe ffb4 	bl	80015b8 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe ffb0 	bl	80015b8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e184      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d030      	beq.n	80026e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_RCC_OscConfig+0x2b4>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe ff94 	bl	80015b8 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe ff90 	bl	80015b8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e164      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
 80026b2:	e015      	b.n	80026e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_OscConfig+0x2b4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7fe ff7d 	bl	80015b8 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7fe ff79 	bl	80015b8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e14d      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a0 	beq.w	800282e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d121      	bne.n	800276e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7fe ff3f 	bl	80015b8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e011      	b.n	8002762 <HAL_RCC_OscConfig+0x2ce>
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	42470000 	.word	0x42470000
 8002748:	42470e80 	.word	0x42470e80
 800274c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe ff32 	bl	80015b8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e106      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	4b85      	ldr	r3, [pc, #532]	; (8002978 <HAL_RCC_OscConfig+0x4e4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d106      	bne.n	8002784 <HAL_RCC_OscConfig+0x2f0>
 8002776:	4b81      	ldr	r3, [pc, #516]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	4a80      	ldr	r2, [pc, #512]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6713      	str	r3, [r2, #112]	; 0x70
 8002782:	e01c      	b.n	80027be <HAL_RCC_OscConfig+0x32a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x312>
 800278c:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a7a      	ldr	r2, [pc, #488]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a77      	ldr	r2, [pc, #476]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	e00b      	b.n	80027be <HAL_RCC_OscConfig+0x32a>
 80027a6:	4b75      	ldr	r3, [pc, #468]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a74      	ldr	r2, [pc, #464]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	4b72      	ldr	r3, [pc, #456]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a71      	ldr	r2, [pc, #452]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d015      	beq.n	80027f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fef7 	bl	80015b8 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fef3 	bl	80015b8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0c5      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ee      	beq.n	80027ce <HAL_RCC_OscConfig+0x33a>
 80027f0:	e014      	b.n	800281c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fee1 	bl	80015b8 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fedd 	bl	80015b8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0af      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	4b5a      	ldr	r3, [pc, #360]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ee      	bne.n	80027fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b56      	ldr	r3, [pc, #344]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a55      	ldr	r2, [pc, #340]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 809b 	beq.w	800296e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d05c      	beq.n	80028fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d141      	bne.n	80028d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x4ec>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe feb1 	bl	80015b8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fead 	bl	80015b8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e081      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	019b      	lsls	r3, r3, #6
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	3b01      	subs	r3, #1
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	4937      	ldr	r1, [pc, #220]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a2:	4b37      	ldr	r3, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0x4ec>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fe86 	bl	80015b8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fe82 	bl	80015b8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e056      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x41c>
 80028ce:	e04e      	b.n	800296e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x4ec>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fe6f 	bl	80015b8 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fe6b 	bl	80015b8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e03f      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x44a>
 80028fc:	e037      	b.n	800296e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e032      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_RCC_OscConfig+0x4e8>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d028      	beq.n	800296a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d121      	bne.n	800296a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d11a      	bne.n	800296a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002940:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002942:	4293      	cmp	r3, r2
 8002944:	d111      	bne.n	800296a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d107      	bne.n	800296a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40007000 	.word	0x40007000
 800297c:	40023800 	.word	0x40023800
 8002980:	42470060 	.word	0x42470060

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cc      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d90c      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e067      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fda0 	bl	80015b8 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fd9c 	bl	80015b8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fd00 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08002d84 	.word	0x08002d84
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	20000008 	.word	0x20000008

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	2300      	movs	r3, #0
 8002b62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80bd 	bhi.w	8002cf4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e0b7      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b86:	60bb      	str	r3, [r7, #8]
       break;
 8002b88:	e0b7      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b8c:	60bb      	str	r3, [r7, #8]
      break;
 8002b8e:	e0b4      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d04d      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	461a      	mov	r2, r3
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	ea02 0800 	and.w	r8, r2, r0
 8002bbe:	ea03 0901 	and.w	r9, r3, r1
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	014b      	lsls	r3, r1, #5
 8002bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bd4:	0142      	lsls	r2, r0, #5
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	ebb0 0008 	subs.w	r0, r0, r8
 8002bde:	eb61 0109 	sbc.w	r1, r1, r9
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	018b      	lsls	r3, r1, #6
 8002bec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bf0:	0182      	lsls	r2, r0, #6
 8002bf2:	1a12      	subs	r2, r2, r0
 8002bf4:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf8:	f04f 0000 	mov.w	r0, #0
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	00d9      	lsls	r1, r3, #3
 8002c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c06:	00d0      	lsls	r0, r2, #3
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	eb12 0208 	adds.w	r2, r2, r8
 8002c10:	eb43 0309 	adc.w	r3, r3, r9
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	0259      	lsls	r1, r3, #9
 8002c1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c22:	0250      	lsls	r0, r2, #9
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f7fd fac8 	bl	80001c8 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e04a      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	ea02 0400 	and.w	r4, r2, r0
 8002c5a:	ea03 0501 	and.w	r5, r3, r1
 8002c5e:	4620      	mov	r0, r4
 8002c60:	4629      	mov	r1, r5
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	014b      	lsls	r3, r1, #5
 8002c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c70:	0142      	lsls	r2, r0, #5
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	1b00      	subs	r0, r0, r4
 8002c78:	eb61 0105 	sbc.w	r1, r1, r5
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	018b      	lsls	r3, r1, #6
 8002c86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c8a:	0182      	lsls	r2, r0, #6
 8002c8c:	1a12      	subs	r2, r2, r0
 8002c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	00d9      	lsls	r1, r3, #3
 8002c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca0:	00d0      	lsls	r0, r2, #3
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	1912      	adds	r2, r2, r4
 8002ca8:	eb45 0303 	adc.w	r3, r5, r3
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	0299      	lsls	r1, r3, #10
 8002cb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cba:	0290      	lsls	r0, r2, #10
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	f7fd fa7c 	bl	80001c8 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	60bb      	str	r3, [r7, #8]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cf6:	60bb      	str	r3, [r7, #8]
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	007a1200 	.word	0x007a1200

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4d0d      	ldr	r5, [pc, #52]	; (8002d4c <__libc_init_array+0x38>)
 8002d18:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	2600      	movs	r6, #0
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	4d0b      	ldr	r5, [pc, #44]	; (8002d54 <__libc_init_array+0x40>)
 8002d26:	4c0c      	ldr	r4, [pc, #48]	; (8002d58 <__libc_init_array+0x44>)
 8002d28:	f000 f820 	bl	8002d6c <_init>
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	2600      	movs	r6, #0
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002d9c 	.word	0x08002d9c
 8002d50:	08002d9c 	.word	0x08002d9c
 8002d54:	08002d9c 	.word	0x08002d9c
 8002d58:	08002da0 	.word	0x08002da0

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <_init>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr

08002d78 <_fini>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr
